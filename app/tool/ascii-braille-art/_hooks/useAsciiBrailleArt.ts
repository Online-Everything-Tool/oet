import { useCallback } from 'react';

export type ArtType = 'ascii' | 'braille';

// Standard FIGlet font: "block"
const ASCII_FONT: Record<string, string[]> = {
  'A': [" ### ", "#   #", "#####", "#   #", "#   #"],
  'B': ["#### ", "#   #", "#### ", "#   #", "#### "],
  'C': [" ####", "#    ", "#    ", "#    ", " ####"],
  'D': ["#### ", "#   #", "#   #", "#   #", "#### "],
  'E': ["#####", "#    ", "###  ", "#    ", "#####"],
  'F': ["#####", "#    ", "###  ", "#    ", "#    "],
  'G': [" ####", "#    ", "# ###", "#   #", " ####"],
  'H': ["#   #", "#   #", "#####", "#   #", "#   #"],
  'I': ["#####", "  #  ", "  #  ", "  #  ", "#####"],
  'J': ["#####", "   # ", "   # ", "#  # ", " ##  "],
  'K': ["#  # ", "# #  ", "##   ", "# #  ", "#  # "],
  'L': ["#    ", "#    ", "#    ", "#    ", "#####"],
  'M': ["#   #", "## ##", "# # #", "#   #", "#   #"],
  'N': ["#   #", "##  #", "# # #", "#  ##", "#   #"],
  'O': [" ### ", "#   #", "#   #", "#   #", " ### "],
  'P': ["#### ", "#   #", "#### ", "#    ", "#    "],
  'Q': [" ### ", "#   #", "# # #", " ### ", "    #"],
  'R': ["#### ", "#   #", "#### ", "#  # ", "#   #"],
  'S': [" ####", "#    ", " ### ", "    #", "#### "],
  'T': ["#####", "  #  ", "  #  ", "  #  ", "  #  "],
  'U': ["#   #", "#   #", "#   #", "#   #", " ### "],
  'V': ["#   #", "#   #", "#   #", " # # ", "  #  "],
  'W': ["#   #", "#   #", "# # #", "## ##", "#   #"],
  'X': ["#   #", " # # ", "  #  ", " # # ", "#   #"],
  'Y': ["#   #", " # # ", "  #  ", "  #  ", "  #  "],
  'Z': ["#####", "   # ", "  #  ", " #   ", "#####"],
  '1': ["  #  ", " ##  ", "  #  ", "  #  ", " ### "],
  '2': [" ### ", "#   #", "  ## ", " #   ", "#####"],
  '3': [" ### ", "#   #", "  ## ", "#   #", " ### "],
  '4': ["#  # ", "#  # ", "#####", "   # ", "   # "],
  '5': ["#####", "#    ", "#### ", "    #", "###  "],
  '6': [" ### ", "#    ", "#### ", "#   #", " ### "],
  '7': ["#####", "    #", "   # ", "  #  ", " #   "],
  '8': [" ### ", "#   #", " ### ", "#   #", " ### "],
  '9': [" ### ", "#   #", " ####", "    #", " ### "],
  '0': [" ### ", "# # #", "# # #", "# # #", " ### "],
  ' ': ["     ", "     ", "     ", "     ", "     "],
  '.': ["     ", "     ", "     ", " ##  ", " ##  "],
  ',': ["     ", "     ", " ##  ", " ##  ", " #   "],
  '!': ["  #  ", "  #  ", "  #  ", "     ", "  #  "],
  '?': [" ### ", "#   #", "  ## ", "     ", "  #  "],
  '-': ["     ", "     ", "#####", "     ", "     "],
  '_': ["     ", "     ", "     ", "     ", "#####"],
  '=': ["     ", "#####", "     ", "#####", "     "],
  '+': ["     ", "  #  ", "#####", "  #  ", "     "],
  '/': ["    #", "   # ", "  #  ", " #   ", "#    "],
  '\\':["#    ", " #   ", "  #  ", "   # ", "    #"],
  '(': ["  #  ", " #   ", " #   ", " #   ", "  #  "],
  ')': [" #   ", "  #  ", "  #  ", "  #  ", " #   "],
  '[': [" ### ", " #   ", " #   ", " #   ", " ### "],
  ']': [" ### ", "   # ", "   # ", "   # ", " ### "],
  '{': ["  ## ", " #   ", " # # ", "   # ", "  ## "],
  '}': [" ##  ", "   # ", " # # ", "   # ", " ##  "],
  '*': [" # # ", "  #  ", " # # ", "  #  ", " # # "],
  '&': [" ### ", "# #  ", " ##  ", "# # #", " ### "],
  '%': ["#  # ", "   # ", "  #  ", " #   ", "#  # "],
  '$': ["  #  ", "#####", "  #  ", "#####", "  #  "],
  '#': [" # # ", "#####", " # # ", "#####", " # # "],
  '@': [" ### ", "#   #", "## ##", "#    ", " ####"],
  '"': [" # # ", " # # ", "     ", "     ", "     "],
  "'": ["  #  ", "  #  ", "     ", "     ", "     "],
  ':': ["     ", " ##  ", "     ", " ##  ", "     "],
  ';': ["     ", " ##  ", "     ", " ##  ", " #   "],
};

const BRAILLE_MAP: Record<string, string> = {
  'a': '⠁', 'b': '⠃', 'c': '⠉', 'd': '⠙', 'e': '⠑', 'f': '⠋', 'g': '⠛', 'h': '⠓', 'i': '⠊', 'j': '⠚', 'k': '⠅', 'l': '⠇', 'm': '⠍', 'n': '⠝', 'o': '⠕', 'p': '⠏', 'q': '⠟', 'r': '⠗', 's': '⠎', 't': '⠞', 'u': '⠥', 'v': '⠧', 'w': '⠺', 'x': '⠭', 'y': '⠽', 'z': '⠵',
  '1': '⠂', '2': '⠆', '3': '⠒', '4': '⠲', '5': '⠢', '6': '⠖', '7': '⠶', '8': '⠦', '9': '⠔', '0': '⠴',
  '.': '⠲', ',': '⠂', '?': '⠦', '!': '⠖', "'": '⠄', '-': '⠤', '(': '⠐⠣', ')': '⠐⠜', ':': '⠒', ';': '⠆',
  ' ': '⠀', '\n': '\n'
};

const FONT_HEIGHT = 5;

export const useAsciiBrailleArt = () => {
  const convertToAscii = useCallback((text: string): string => {
    const lines = text.split('\n');
    const outputLines: string[] = [];

    for (const line of lines) {
      if (line.trim() === '') {
        outputLines.push('');
        continue;
      }
      const charArtLines: string[][] = [];
      for (const char of line) {
        const upperChar = char.toUpperCase();
        charArtLines.push(ASCII_FONT[upperChar] || ASCII_FONT['?']);
      }

      for (let i = 0; i < FONT_HEIGHT; i++) {
        let assembledLine = '';
        for (const charArt of charArtLines) {
          assembledLine += charArt[i] || '     ';
        }
        outputLines.push(assembledLine);
      }
    }
    return outputLines.join('\n');
  }, []);

  const convertToBraille = useCallback((text: string): string => {
    let result = '';
    const lowerText = text.toLowerCase();
    for (const char of lowerText) {
      result += BRAILLE_MAP[char] || char;
    }
    return result;
  }, []);

  const convertText = useCallback((text: string, type: ArtType): string => {
    if (type === 'ascii') {
      return convertToAscii(text);
    }
    if (type === 'braille') {
      return convertToBraille(text);
    }
    throw new Error(`Unknown art type: ${type}`);
  }, [convertToAscii, convertToBraille]);

  return { convertText };
};