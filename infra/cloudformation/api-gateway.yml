# infra/api-gateway.yaml
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  OET Backend API: Defines the API Gateway and Lambda functions for the Online Everything Tool backend,
  sourcing Lambda code from the /app/api directory.

Parameters:
  # --- Secrets ---
  # Consider using AWS Parameter Store or Secrets Manager for production environments
  # instead of CloudFormation parameters for better security and management.
  GeminiApiKey:
    Type: String
    Description: Google Gemini API Key
    NoEcho: true # Masks the value in CloudFormation console/CLI outputs
  GitHubAppId:
    Type: String
    Description: GitHub App ID
    NoEcho: true
  GitHubPrivateKeyBase64:
    Type: String
    Description: GitHub App Private Key (Base64 encoded)
    NoEcho: true

Globals:
  Function:
    Timeout: 20 # Default timeout in seconds (adjust per function if needed)
    MemorySize: 256 # Default memory in MB (adjust per function if needed)
    Runtime: nodejs20.x # Specify your desired Node.js runtime consistent across functions
    Architectures: # Using ARM (Graviton) can be more cost-effective
      - arm64
    Environment:
      Variables:
        # Pass parameters securely as environment variables to all Lambda functions
        GEMINI_API_KEY: !Ref GeminiApiKey
        GITHUB_APP_ID: !Ref GitHubAppId
        GITHUB_PRIVATE_KEY_BASE64: !Ref GitHubPrivateKeyBase64
        # NODE_OPTIONS: --enable-source-maps # Useful for debugging, requires source maps in build
    # Default IAM policies for Lambda functions
    Policies:
      # Basic policy allowing functions to write logs to CloudWatch
      - Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: 'arn:aws:logs:*:*:*'
      # Add other necessary policies, e.g., for Secrets Manager, Parameter Store, S3 etc.
      # Example: - SecretsManagerReadWrite: { SecretName: !Sub '/oet/${AWS::StackName}/secrets' }

Resources:
  # --- API Gateway Definition ---
  OetApiGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      # StageName: Prod # Optional: Define a stage name explicitly
      CorsConfiguration: # Configure Cross-Origin Resource Sharing
        AllowMethods:
          - GET
          - POST
          - OPTIONS # Required for browser preflight requests
        AllowOrigins:
          # IMPORTANT: Replace '*' with your specific frontend domain(s) for production security!
          # e.g., - https://your-domain.com
          #       - http://localhost:3000 # If needed for local frontend dev
          - '*'
        AllowHeaders:
          # Allow common headers, add others if needed (e.g., Authorization)
          - Content-Type
        MaxAge: '600' # Cache CORS preflight response for 10 minutes

  # --- Lambda Function Definitions ---
  # Each function points to a directory within app/api relative to this template file

  ListModelsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-ListModels'
      # Points to the directory containing the handler code, relative to this template file
      CodeUri: ../app/api/list-models/
      # Specifies the file (route.ts -> route.js after build) and the exported handler function
      Handler: route.handler
      Events:
        ListModelsApi:
          Type: HttpApi # Triggered by HTTP API event
          Properties:
            Path: /api/list-models # The URL path
            Method: get # The HTTP method
            ApiId: !Ref OetApiGateway # Links to the API Gateway defined above

  ValidateDirectiveFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-ValidateDirective'
      CodeUri: ../app/api/validate-directive/
      Handler: route.handler
      Events:
        ValidateDirectiveApi:
          Type: HttpApi
          Properties:
            Path: /api/validate-directive
            Method: post
            ApiId: !Ref OetApiGateway

  GenerateToolResourcesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-GenerateToolResources'
      CodeUri: ../app/api/generate-tool-resources/
      Handler: route.handler
      Events:
        GenerateToolResourcesApi:
          Type: HttpApi
          Properties:
            Path: /api/generate-tool-resources
            Method: post
            ApiId: !Ref OetApiGateway

  AnalyzeDirectiveNameFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-AnalyzeDirectiveName'
      CodeUri: ../app/api/analyze-directive-name/
      Handler: route.handler
      Events:
        AnalyzeDirectiveNameApi:
          Type: HttpApi
          Properties:
            Path: /api/analyze-directive-name
            Method: post
            ApiId: !Ref OetApiGateway

  CreateAnonymousPrFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-CreateAnonymousPr'
      CodeUri: ../app/api/create-anonymous-pr/
      Handler: route.handler
      Timeout: 30 # Increase timeout as GitHub operations can take longer
      Events:
        CreateAnonymousPrApi:
          Type: HttpApi
          Properties:
            Path: /api/create-anonymous-pr
            Method: post
            ApiId: !Ref OetApiGateway

Outputs:
  # Output the API endpoint URL after deployment
  OetApiEndpoint:
    Description: "API Gateway endpoint URL for OET Backend API"
    Value: !Sub "https://${OetApiGateway}.execute-api.${AWS::Region}.amazonaws.com"
    # Export: # Optional: Export value for cross-stack references
    #   Name: !Sub "${AWS::StackName}-ApiEndpoint"