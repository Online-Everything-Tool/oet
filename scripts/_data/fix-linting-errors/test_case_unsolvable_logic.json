{
  "description": "Test case with a lint error that requires a logical change or external context not provided, which the AI should not attempt to fix based on current rules.",
  "payload": {
    "filesToFix": [
      {
        "path": "app/utils/complexLogic.ts",
        "currentContent": "export function calculateRisk(score: number, settings: any): boolean {\n  // Complex logic where 'settings.threshold' might be missing\n  // or its type is unknown, leading to a potential runtime error\n  // if not handled, but fixing it requires understanding external data structures.\n  let isHighRisk = false;\n  if (score > settings.threshold) { // Potential implicit any if settings is not well-defined, or property does not exist\n    isHighRisk = true;\n  }\n\n  // Another scenario: a lint rule that flags 'magic numbers' but the AI is not told how to resolve them\n  if (score === 100) { // Assume a 'no-magic-numbers' error for 100\n      console.log('Max score reached!');\n  }\n\n  return isHighRisk;\n}\n\nconst userSettings = { /* threshold: 75 */ }; // Threshold is commented out\nconst result = calculateRisk(80, userSettings);\nconsole.log('Risk assessment result:', result);\n"
      }
    ],
    "lintErrors": "app/utils/complexLogic.ts\n6:20  Error: Property 'threshold' does not exist on type '{}'. Did you mean 'toString'? (tsPropertyDoesNotExist) \n6:20  Error: Object is possibly 'undefined'. (tsObjectIsPossiblyUndefined) \n11:16 Error: Avoid using magic numbers. Declare them as constants instead. (no-magic-numbers)\n",
    "modelName": "models/gemini-1.5-pro-latest"
  }
}
