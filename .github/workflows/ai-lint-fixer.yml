# .github/workflows/ai-lint-fixer.yml
name: AI Lint Fixer

on:
  workflow_run:
    workflows: ['Validate Generated Tool PR']
    types:
      - completed

jobs:
  attempt_fix:
    name: Attempt AI Lint Fix
    if: github.event.workflow_run.conclusion == 'failure'
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for checkout and for the App token to push
      actions: read # Needed for downloading artifacts

    steps:
      - name: Get Triggering Workflow Run Info
        id: get_trigger_info
        run: |
          echo "--- Trigger Info ---"
          echo "Triggering Workflow Run ID: ${{ github.event.workflow_run.id }}"
          echo "Expected Artifact Name: lint-failure-data-${{ github.event.workflow_run.head_sha }}"
          echo "PR Head Branch for push: ${{ github.event.workflow_run.head_branch }}"
          echo "Commit SHA for checkout: ${{ github.event.workflow_run.head_sha }}"
          echo "----------------------"
          echo "EXPECTED_ARTIFACT_SHA=${{ github.event.workflow_run.head_sha }}" >> $GITHUB_ENV
          echo "PR_HEAD_BRANCH_FOR_PUSH=${{ github.event.workflow_run.head_branch }}" >> $GITHUB_ENV

      - name: Download Lint Failure Artifact
        id: download_artifact
        uses: actions/download-artifact@v4
        with:
          name: lint-failure-data-${{ env.EXPECTED_ARTIFACT_SHA }}
          path: ${{ runner.temp }}/lint-data
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
        continue-on-error: true

      - name: Check if Artifact Exists and Contains Data
        id: check_artifact
        if: steps.download_artifact.outcome == 'success'
        run: |
          # ... (script content as previously validated - checking files, setting artifact_valid output)
          LINT_ERRORS_FILE="${{ runner.temp }}/lint-data/lint_errors.txt"
          FILES_TO_CHECK_FILE="${{ runner.temp }}/lint-data/files_to_check.txt"
          echo "--- Artifact Download and Content Check ---"
          # ... (rest of the script from your working version)
          if [ -f "$LINT_ERRORS_FILE" ] && [ -s "$LINT_ERRORS_FILE" ] && \
             [ -f "$FILES_TO_CHECK_FILE" ] && [ -s "$FILES_TO_CHECK_FILE" ]; then
            echo "Lint failure artifacts found and are not empty."
            echo "artifact_valid=true" >> $GITHUB_OUTPUT
            # ... (logging file contents)
          else
            echo "::error::Lint failure artifact files not found or empty."
            echo "artifact_valid=false" >> $GITHUB_OUTPUT
            exit 1 
          fi
          echo "-------------------------------------------"

      - name: Checkout PR Code
        if: steps.check_artifact.outputs.artifact_valid == 'true'
        uses: actions/checkout@v4
        with:
          ref: ${{ env.EXPECTED_ARTIFACT_SHA }}
          fetch-depth: 0

      - name: Prepare Data for AI Lint Fix API
        id: prepare_fix_data
        if: steps.check_artifact.outputs.artifact_valid == 'true'
        # ... (script content as previously validated)
        run: |
          LINT_ERRORS_FILE="${{ runner.temp }}/lint-data/lint_errors.txt"
          FILES_TO_CHECK_FILE="${{ runner.temp }}/lint-data/files_to_check.txt"
          PR_FILES_JSON_PATH="${{ runner.temp }}/pr_files_for_lint_fix.json"
          # ... (rest of the script from your working version to build PR_FILES_JSON_PATH)
          echo "--- Preparing pr_files_for_lint_fix.json ---"
          echo '[' > $PR_FILES_JSON_PATH
          FIRST_FILE=true
          while IFS= read -r filepath; do
            if [ -z "$filepath" ]; then echo "Skipping empty filepath in files_to_check.txt"; continue; fi
            echo "Processing filepath from artifact: '$filepath'"
            if [ -f "$filepath" ]; then
              if [ "$FIRST_FILE" = "false" ]; then
                echo ',' >> $PR_FILES_JSON_PATH
              fi
              FILE_CONTENT_RAW=$(cat "$filepath")
              # echo "First 5 lines of content for '$filepath':" # Optional debug
              # echo "$FILE_CONTENT_RAW" | head -n 5 | sed 's/^/    /' 
              jq -n --arg path "$filepath" --arg content "$FILE_CONTENT_RAW" \
                '{path: $path, currentContent: $content}' >> $PR_FILES_JSON_PATH
              FIRST_FILE=false
            else
              echo "::warning::File path '$filepath' from artifact not found in checkout. Skipping."
            fi
          done < "$FILES_TO_CHECK_FILE"
          echo ']' >> $PR_FILES_JSON_PATH
          jq -s 'if type == "array" and length > 0 and (.[0] | type) == "array" then .[0] else . end' $PR_FILES_JSON_PATH > temp_final.json && mv temp_final.json $PR_FILES_JSON_PATH
          # echo "--- Content of prepared pr_files_for_lint_fix.json (first 20 lines) ---" # Optional debug
          # head -n 20 $PR_FILES_JSON_PATH
          # echo "--- End pr_files_for_lint_fix.json preview ---"
          echo "Full path to prepared JSON: $PR_FILES_JSON_PATH"
          echo "-------------------------------------------"

      - name: Call AI Lint Fix API
        id: call_fix_api
        if: steps.prepare_fix_data.outcome == 'success' && steps.check_artifact.outputs.artifact_valid == 'true'
        env:
          LINT_FIX_API_ENDPOINT: ${{ secrets.BACKEND_APP_URL }}/api/fix-linting-errors
        # ... (script content as previously validated - curl call, response checking, setting outputs)
        run: |
          LINT_ERRORS_CONTENT=$(cat "${{ runner.temp }}/lint-data/lint_errors.txt")
          LINT_ERRORS_JSON_ESCAPED=$(echo "$LINT_ERRORS_CONTENT" | jq -R -s '.')
          FILES_TO_FIX_JSON_CONTENT=$(cat "${{ runner.temp }}/pr_files_for_lint_fix.json")

          if ! echo "$FILES_TO_FIX_JSON_CONTENT" | jq -e 'type == "array" and length > 0' > /dev/null; then
            echo "::warning::No valid files to fix after preparation. Skipping API call."
            # cat "${{ runner.temp }}/pr_files_for_lint_fix.json" 
            echo "api_call_skipped=true" >> $GITHUB_OUTPUT
            exit 0 
          fi

          API_PAYLOAD=$(jq -n \
            --argjson filesToFix "$FILES_TO_FIX_JSON_CONTENT" \
            --argjson lintErrors "$LINT_ERRORS_JSON_ESCAPED" \
            --arg modelName "models/gemini-1.5-pro-latest" \
            '{filesToFix: $filesToFix, lintErrors: $lintErrors, modelName: $modelName}')

          echo "Calling AI Lint Fix API at $LINT_FIX_API_ENDPOINT ..."
          # echo "API Payload (first 500 chars): $(echo "$API_PAYLOAD" | head -c 500)" 

          HTTP_RESPONSE_CODE=$(curl -s -w "%{http_code}" -X POST "$LINT_FIX_API_ENDPOINT" \
            -H "Content-Type: application/json" \
            -d "$API_PAYLOAD" \
            -o "${{ runner.temp }}/fix_response.json")

          echo "AI Lint Fix API HTTP Status: $HTTP_RESPONSE_CODE"
          # echo "--- AI API Response (fix_response.json) ---" # Optional debug
          # cat "${{ runner.temp }}/fix_response.json"
          # echo "--- End AI API Response ---"

          if [ "$HTTP_RESPONSE_CODE" -ne 200 ]; then
            echo "::error::AI Lint Fix API call failed with HTTP status $HTTP_RESPONSE_CODE."
            cat "${{ runner.temp }}/fix_response.json" # Show error response from API
            exit 1
          fi
          if ! jq -e . "${{ runner.temp }}/fix_response.json" > /dev/null 2>&1; then
            echo "::error::AI Lint Fix API response is not valid JSON."
            cat "${{ runner.temp }}/fix_response.json" # Show malformed JSON
            exit 1
          fi

          FIX_API_SUCCESS=$(jq -r .success "${{ runner.temp }}/fix_response.json")
          echo "Fix API Reported Success (from JSON): $FIX_API_SUCCESS"
          echo "api_response_success=$FIX_API_SUCCESS" >> $GITHUB_OUTPUT
          echo "api_response_path=${{ runner.temp }}/fix_response.json" >> $GITHUB_OUTPUT
          echo "api_call_skipped=false" >> $GITHUB_OUTPUT

      - name: Generate GitHub App Token for Push
        id: generate_app_token
        if: steps.call_fix_api.outputs.api_call_skipped != 'true' && steps.call_fix_api.outputs.api_response_success == 'true' && steps.check_artifact.outputs.artifact_valid == 'true'
        uses: actions/create-github-app-token@v1
        with:
          app_id: ${{ secrets.GITHUB_APP_ID }} # Use your existing App ID secret
          private_key: ${{ secrets.GITHUB_PRIVATE_KEY_BASE64 }} # Use your existing App Private Key secret (ensure it's base64 DECODED if the action expects PEM)
          # If create-github-app-token@v1 expects PEM, you might need a step to decode GITHUB_PRIVATE_KEY_BASE64 first
          # Or, store the PEM directly as a multi-line secret. Let's assume for now it handles base64 or you have PEM.

      - name: Apply and Commit Fixes
        if: steps.call_fix_api.outputs.api_call_skipped != 'true' && steps.call_fix_api.outputs.api_response_success == 'true' && steps.check_artifact.outputs.artifact_valid == 'true' && steps.generate_app_token.outputs.token != ''
        env:
          GH_APP_TOKEN: ${{ steps.generate_app_token.outputs.token }}
        run: |
          # ... (script content using temporary flag file for CHANGES_APPLIED, as previously validated)
          # ... (and using GH_APP_TOKEN for the git push)
          echo "--- Starting Apply and Commit Fixes ---"
          FIX_RESPONSE_FILE="${{ steps.call_fix_api.outputs.api_response_path }}"
          # ... (rest of the script from your working version, ensuring the git push line is:)
          # git push https://x-access-token:${GH_APP_TOKEN}@github.com/${{ github.repository }}.git HEAD:"${PR_BRANCH_NAME_CLEAN}"

          LAST_COMMIT_MSG_ON_BRANCH=$(git log -1 --pretty=%B)
          if [[ "$LAST_COMMIT_MSG_ON_BRANCH" == "chore: AI-assisted lint fixes" ]]; then
            echo "::warning::The latest commit on the branch is already an AI lint fix. Skipping."
            exit 0 
          fi

          CHANGES_APPLIED_FLAG_FILE=$(mktemp)
          echo "false" > "$CHANGES_APPLIED_FLAG_FILE"

          FILE_PATHS_TO_PROCESS=$(jq -r '.fixedFiles | to_entries[] | select(.value != null) | .key' "$FIX_RESPONSE_FILE")

          if [ -z "$FILE_PATHS_TO_PROCESS" ]; then
            echo "::notice::No files with non-null fixed content found in API response."
          else
            echo "$FILE_PATHS_TO_PROCESS" | while IFS= read -r filepath; do
              if [ -z "$filepath" ]; then continue; fi
              fixedcontent=$(jq -r --arg pathkey "$filepath" '.fixedFiles[$pathkey]' "$FIX_RESPONSE_FILE")
              if [ "$fixedcontent" = "null" ] || [ -z "$fixedcontent" ]; then continue; fi
              if [ ! -f "$filepath" ]; then continue; fi
              
              ORIGINAL_CONTENT_FOR_COMPARE=$(cat "$filepath")
              NORMALIZED_ORIGINAL_CONTENT=$(echo "$ORIGINAL_CONTENT_FOR_COMPARE" | tr -d '\r')
              NORMALIZED_FIXED_CONTENT=$(echo "$fixedcontent" | tr -d '\r')

              if [ "$NORMALIZED_ORIGINAL_CONTENT" = "$NORMALIZED_FIXED_CONTENT" ]; then
                echo "No actual content change for '$filepath'."
              else
                echo "CONTENT DIFFERS for '$filepath'. Applying fix."
                echo "$fixedcontent" > "$filepath" 
                git add "$filepath"
                echo "true" > "$CHANGES_APPLIED_FLAG_FILE" 
              fi
            done 
          fi 

          CHANGES_APPLIED=$(cat "$CHANGES_APPLIED_FLAG_FILE")
          rm "$CHANGES_APPLIED_FLAG_FILE" 

          echo "CHANGES_APPLIED flag is: $CHANGES_APPLIED"

          if [ "$CHANGES_APPLIED" = "true" ]; then
            if ! git diff --staged --quiet; then
              echo "Staged changes found. Proceeding with commit and push using App token."
              git config user.name "OET Bot (AI Fixer)" 
              # Using the standard App email format based on App ID
              git config user.email "${{ secrets.GITHUB_APP_ID }}+${{ github.repository_owner }}.users.noreply.github.com" 
              git commit -m "chore: AI-assisted lint fixes"
              
              PR_BRANCH_NAME_CLEAN=$(echo "${{ env.PR_HEAD_BRANCH_FOR_PUSH }}" | sed 's|^refs/heads/||')
              echo "Pushing to branch: $PR_BRANCH_NAME_CLEAN using GitHub App token."

              if [ -z "$GH_APP_TOKEN" ]; then
                echo "::error::GitHub App token not generated or empty. Cannot push."
                exit 1
              fi
              
              git push https://x-access-token:${GH_APP_TOKEN}@github.com/${{ github.repository }}.git HEAD:"$PR_BRANCH_NAME_CLEAN"
              
              if [ $? -eq 0 ]; then
                echo "::notice::AI lint fixes committed and pushed using App token. Workflow on PR branch should re-run."
              else
                echo "::error::git push using App token failed."
                exit 1
              fi
            else
              echo "::notice::AI proposed changes, but 'git diff --staged --quiet' found no differences after 'git add'."
            fi
          else
            echo "::notice::No changes were applied by the AI, or all changes resulted in identical content (after normalization)."
          fi
          echo "--- End of Apply and Commit Fixes ---"
