# .github/workflows/ai_lint_fixer.yml
name: AI Lint Fixer

on:
  workflow_run:
    workflows: ['Validate Generated Tool PR']
    types:
      - completed

jobs:
  attempt_fix:
    name: Attempt AI Lint Fix
    if: >
      github.event.workflow_run.conclusion == 'failure' &&
      github.event.workflow_run.pull_requests[0] != null &&
      github.event.workflow_run.pull_requests[0].head.ref != github.event.repository.default_branch
    runs-on: ubuntu-latest
    permissions:
      contents: write 
      actions: read 
      pull-requests: write 
    env:
      PR_NUMBER: ${{ github.event.workflow_run.pull_requests[0].number }}
      PR_HEAD_SHA: ${{ github.event.workflow_run.pull_requests[0].head.sha }}
      PR_HEAD_BRANCH: ${{ github.event.workflow_run.pull_requests[0].head.ref }}
      TRIGGERING_WORKFLOW_RUN_ID: ${{ github.event.workflow_run.id }} 

    steps:
      - name: Log Effective Context
        id: log_context 
        run: |
          echo "--- ALF Context from workflow_run event ---"
          echo "Attempting fix for PR #${{ env.PR_NUMBER }} on branch ${{ env.PR_HEAD_BRANCH }} (SHA: ${{ env.PR_HEAD_SHA }})"
          echo "Triggering VPR Workflow Run ID: ${{ env.TRIGGERING_WORKFLOW_RUN_ID }}"
          echo "VPR Conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "-------------------------------------------"
          if [ -z "${{ env.PR_HEAD_SHA }}" ]; then
            echo "::error::ALF: PR_HEAD_SHA is empty. Cannot proceed."
            echo "setup_failed=true" >> $GITHUB_OUTPUT 
            exit 1 
          fi
          echo "setup_failed=false" >> $GITHUB_OUTPUT

      - name: Download Lint Failure Artifact
        id: download_artifact
        if: steps.log_context.outputs.setup_failed != 'true'
        uses: actions/download-artifact@v4
        with:
          name: lint-failure-data-${{ env.PR_HEAD_SHA }}
          path: ${{ runner.temp }}/lint-data
          github-token: ${{ secrets.GITHUB_TOKEN }} 
          run-id: ${{ env.TRIGGERING_WORKFLOW_RUN_ID }}
        continue-on-error: true

      - name: Check if Artifact Is Valid and Actionable
        id: check_artifact
        if: steps.log_context.outputs.setup_failed != 'true'
        run: |
          if [ "${{ steps.download_artifact.outcome }}" != "success" ]; then
            echo "::notice::ALF: Lint failure artifact 'lint-failure-data-${{ env.PR_HEAD_SHA }}' not found or download failed. No lint fixing action will be taken by ALF for this VPR failure."
            echo "artifact_is_valid_and_actionable=false" >> $GITHUB_OUTPUT
          else
            LINT_ERRORS_FILE="${{ runner.temp }}/lint-data/lint_errors.txt"
            FILES_TO_CHECK_FILE="${{ runner.temp }}/lint-data/files_to_check.txt"
            if [ -f "$LINT_ERRORS_FILE" ] && [ -s "$LINT_ERRORS_FILE" ] && \
               [ -f "$FILES_TO_CHECK_FILE" ] && [ -s "$FILES_TO_CHECK_FILE" ]; then
              echo "ALF: Lint failure artifact found and appears valid."
              echo "artifact_is_valid_and_actionable=true" >> $GITHUB_OUTPUT
            else
              echo "::notice::ALF: Lint failure artifact downloaded, but 'lint_errors.txt' or 'files_to_check.txt' is missing or empty. No lint fixing action will be taken."
              echo "artifact_is_valid_and_actionable=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Checkout PR Code
        id: checkout_code
        if: steps.check_artifact.outputs.artifact_is_valid_and_actionable == 'true'
        uses: actions/checkout@v4
        with:
          ref: ${{ env.PR_HEAD_SHA }} 
          token: ${{ secrets.AI_LINT_FIXER_PAT }} 
          fetch-depth: 0 

      - name: Read tool-generation-info.json to check lintFixesAttempted
        id: read_tool_gen_info
        if: steps.checkout_code.outcome == 'success'
        run: |
          RAW_BRANCH_NAME="${{ env.PR_HEAD_BRANCH }}"
          TOOL_DIRECTIVE_FROM_BRANCH=""
          if [[ "$RAW_BRANCH_NAME" == feat/gen-* ]]; then
            TOOL_DIRECTIVE_FROM_BRANCH=$(echo "$RAW_BRANCH_NAME" | sed 's|feat/gen-||' | sed 's/-[0-9]*$//')
          else
            echo "::warning::Branch name '${RAW_BRANCH_NAME}' does not match 'feat/gen-' pattern for tool-gen-info path."
            TOOL_DIRECTIVE_FROM_BRANCH="unknown-tool-directive" 
          fi
          
          TOOL_GEN_INFO_FILE="app/tool/${TOOL_DIRECTIVE_FROM_BRANCH}/tool-generation-info.json"
          LINT_FIXES_ATTEMPTED="false" 
          if [ -f "$TOOL_GEN_INFO_FILE" ]; then
            if jq -e '.lintFixesAttempted' "$TOOL_GEN_INFO_FILE" > /dev/null 2>&1; then
              LINT_FIXES_ATTEMPTED_RAW=$(jq -r '.lintFixesAttempted // "false"' "$TOOL_GEN_INFO_FILE")
              if [ "$LINT_FIXES_ATTEMPTED_RAW" == "true" ]; then LINT_FIXES_ATTEMPTED="true"; fi
            fi
            echo "Read '$TOOL_GEN_INFO_FILE'. lintFixesAttempted: $LINT_FIXES_ATTEMPTED"
          else
            echo "::notice::ALF: '$TOOL_GEN_INFO_FILE' not found. Assuming lint fixes have not been attempted."
          fi
          echo "lint_fixes_already_attempted=$LINT_FIXES_ATTEMPTED" >> $GITHUB_OUTPUT
          echo "derived_tool_directive_for_path=$TOOL_DIRECTIVE_FROM_BRANCH" >> $GITHUB_OUTPUT

      - name: Prepare Data for AI Lint Fix API
        id: prepare_fix_data
        if: steps.read_tool_gen_info.outcome == 'success' && steps.read_tool_gen_info.outputs.lint_fixes_already_attempted != 'true'
        run: |
          LINT_ERRORS_FILE="${{ runner.temp }}/lint-data/lint_errors.txt"
          FILES_TO_CHECK_FILE="${{ runner.temp }}/lint-data/files_to_check.txt"
          PR_FILES_JSON_PATH="${{ runner.temp }}/pr_files_for_lint_fix.json"
          
          JQ_TEMP_OUTPUT_FILE="${{ runner.temp }}/jq_processed_files.json"

          echo '[' > "$PR_FILES_JSON_PATH"
          FIRST_FILE=true
          while IFS= read -r filepath; do
            if [ -z "$filepath" ]; then continue; fi;
            actual_filepath=$(echo "$filepath" | tr -d '\r')
            if [ -f "$actual_filepath" ]; then
              if [ "$FIRST_FILE" = "false" ]; then echo ',' >> "$PR_FILES_JSON_PATH"; fi
              jq -n --arg path "$actual_filepath" --arg content "$(cat "$actual_filepath")" \
                '{path: $path, currentContent: $content}' >> "$PR_FILES_JSON_PATH"
              FIRST_FILE=false
            else echo "::warning::File path '$actual_filepath' from artifact not found in checkout."; fi
          done < "$FILES_TO_CHECK_FILE"
          echo ']' >> "$PR_FILES_JSON_PATH"

          if jq -s 'if type == "array" and length > 0 and (.[0] | type) == "array" then .[0] else . end' "$PR_FILES_JSON_PATH" > "$JQ_TEMP_OUTPUT_FILE"; then
            if [ -s "$JQ_TEMP_OUTPUT_FILE" ]; then
              mv "$JQ_TEMP_OUTPUT_FILE" "$PR_FILES_JSON_PATH"
            else
              echo "::warning::jq post-processing produced an empty file. Using potentially unprocessed $PR_FILES_JSON_PATH."
            fi
          else
            echo "::error::jq post-processing command failed. Check the input $PR_FILES_JSON_PATH (content below) and the jq command."
            cat "$PR_FILES_JSON_PATH"
            exit 1
          fi
          echo "Prepared pr_files_for_lint_fix.json. Content:"
          cat "$PR_FILES_JSON_PATH"

      - name: Call AI Lint Fix API
        id: call_fix_api
        if: steps.prepare_fix_data.outcome == 'success'
        env:
          LINT_FIX_API_ENDPOINT: ${{ secrets.BACKEND_APP_URL }}/api/fix-linting-errors
        run: |
          LINT_ERRORS_CONTENT=$(cat "${{ runner.temp }}/lint-data/lint_errors.txt")
          LINT_ERRORS_JSON_ESCAPED=$(echo "$LINT_ERRORS_CONTENT" | jq -R -s '.')
          FILES_TO_FIX_JSON_CONTENT=$(cat "${{ runner.temp }}/pr_files_for_lint_fix.json")

          if ! echo "$FILES_TO_FIX_JSON_CONTENT" | jq -e 'type == "array" and length > 0 and .[0].path' > /dev/null 2>&1; then
            echo "::warning::No valid files with paths found in JSON to fix. Skipping API call."
            echo "Content of pr_files_for_lint_fix.json that caused skip:"
            cat "${{ runner.temp }}/pr_files_for_lint_fix.json"
            echo "api_call_skipped=true" >> $GITHUB_OUTPUT; exit 0
          fi
          echo "api_call_skipped=false" >> $GITHUB_OUTPUT

          # --- MODIFIED LINE: Removed modelName from payload ---
          API_PAYLOAD=$(jq -n --argjson filesToFix "$FILES_TO_FIX_JSON_CONTENT" --argjson lintErrors "$LINT_ERRORS_JSON_ESCAPED" '{filesToFix: $filesToFix, lintErrors: $lintErrors}')
          # --- END MODIFICATION ---
          
          echo "Size of API_PAYLOAD to be sent: $(echo -n "$API_PAYLOAD" | wc -c) bytes"
          echo "First 1000 characters of API_PAYLOAD:"
          echo "$API_PAYLOAD" | head -c 1000 && echo
          echo "Last 1000 characters of API_PAYLOAD:"
          echo "$API_PAYLOAD" | tail -c 1000 && echo
          
          HTTP_RESPONSE_CODE=$(curl -s -w "%{http_code}" -X POST "$LINT_FIX_API_ENDPOINT" -H "Content-Type: application/json" -d "$API_PAYLOAD" -o "${{ runner.temp }}/fix_response.json")
          
          echo "AI Lint Fix API HTTP Status: $HTTP_RESPONSE_CODE"
          echo "--- Full AI API Response (fix_response.json) ---"
          if [ -f "${{ runner.temp }}/fix_response.json" ]; then
            echo "Size of fix_response.json: $(wc -c < "${{ runner.temp }}/fix_response.json") bytes"
            cat "${{ runner.temp }}/fix_response.json" && echo
          else
            echo "fix_response.json not created."
          fi
          echo "--- End of Full AI API Response ---"

          if [ "$HTTP_RESPONSE_CODE" -ne 200 ] || ! jq -e . "${{ runner.temp }}/fix_response.json" > /dev/null 2>&1; then
             echo "::error::AI Lint Fix API call failed or returned invalid JSON."
             echo "api_response_success=false" >> $GITHUB_OUTPUT
             return
          fi
          echo "api_response_success=$(jq -r .success "${{ runner.temp }}/fix_response.json")" >> $GITHUB_OUTPUT
          echo "api_response_path=${{ runner.temp }}/fix_response.json" >> $GITHUB_OUTPUT
          
      - name: Apply AI Fixes and Update Tool Gen Info
        if: steps.call_fix_api.outcome == 'success' && steps.call_fix_api.outputs.api_call_skipped != 'true' && steps.call_fix_api.outputs.api_response_success == 'true'
        id: apply_fixes
        run: |
          FIX_RESPONSE_FILE="${{ steps.call_fix_api.outputs.api_response_path }}"
          echo "false" > changes_made.txt 
          LAST_COMMIT_MSG_ON_BRANCH=$(git log -1 --pretty=%B)
          if [[ "$LAST_COMMIT_MSG_ON_BRANCH" == "chore: AI-assisted lint fixes" ]]; then
            echo "::warning::ALF: Latest commit is already an AI lint fix. Skipping apply/commit/push."; exit 0 
          fi
          ANY_CONTENT_CHANGED_BY_AI="false"
          FILE_PATHS_TO_PROCESS=$(jq -r '.fixedFiles | to_entries[] | select(.value != null) | .key' "$FIX_RESPONSE_FILE" 2>/dev/null || echo "")
          if [ -n "$FILE_PATHS_TO_PROCESS" ]; then
            for filepath_from_jq in $FILE_PATHS_TO_PROCESS; do
              filepath=$(echo "$filepath_from_jq" | xargs); if [ -z "$filepath" ]; then continue; fi
              fixedcontent=$(jq -r --arg pathkey "$filepath" '.fixedFiles[$pathkey]' "$FIX_RESPONSE_FILE")
              if [ "$fixedcontent" = "null" ] || [ -z "$fixedcontent" ] || [ ! -f "$filepath" ]; then continue; fi
              if [ "$(cat "$filepath" | tr -d '\r')" != "$(echo "$fixedcontent" | tr -d '\r')" ]; then
                echo "Applying fix to '$filepath'."; echo "$fixedcontent" > "$filepath"; ANY_CONTENT_CHANGED_BY_AI="true"
              fi; done
          fi
          TOOL_DIRECTIVE_FOR_PATH="${{ steps.read_tool_gen_info.outputs.derived_tool_directive_for_path }}"
          if [ -z "$TOOL_DIRECTIVE_FOR_PATH" ] || [ "$TOOL_DIRECTIVE_FOR_PATH" == "unknown-tool-directive" ]; then
             RAW_BRANCH_NAME_FOR_PATH="${{ env.PR_HEAD_BRANCH }}";
             if [[ "$RAW_BRANCH_NAME_FOR_PATH" == feat/gen-* ]]; then TOOL_DIRECTIVE_FOR_PATH=$(echo "$RAW_BRANCH_NAME_FOR_PATH" | sed 's|feat/gen-||' | sed 's/-[0-9]*$//'); else TOOL_DIRECTIVE_FOR_PATH="directive-not-found"; fi
             echo "::warning:: TOOL_DIRECTIVE_FOR_PATH re-derived as $TOOL_DIRECTIVE_FOR_PATH in apply_fixes"
          fi
          TOOL_GEN_INFO_FILE="app/tool/${TOOL_DIRECTIVE_FOR_PATH}/tool-generation-info.json"; CHANGES_TO_TOOL_GEN_INFO="false"
          if [ -f "$TOOL_GEN_INFO_FILE" ]; then
            if ! jq -e '.lintFixesAttempted == true' "$TOOL_GEN_INFO_FILE" > /dev/null 2>&1; then
                jq '.lintFixesAttempted = true' "$TOOL_GEN_INFO_FILE" > tmp_tool_gen_info.json && mv tmp_tool_gen_info.json "$TOOL_GEN_INFO_FILE"
                echo "Updated '$TOOL_GEN_INFO_FILE': set lintFixesAttempted=true."; CHANGES_TO_TOOL_GEN_INFO="true"
            fi
          else echo "::warning::ALF: '$TOOL_GEN_INFO_FILE' not found for update."; fi
          if [ "$ANY_CONTENT_CHANGED_BY_AI" == "true" ] || [ "$CHANGES_TO_TOOL_GEN_INFO" == "true" ]; then echo "true" > changes_made.txt; fi
          echo "actual_code_changes_by_ai=$ANY_CONTENT_CHANGED_BY_AI" >> $GITHUB_OUTPUT
          echo "overall_commit_made=$(cat changes_made.txt)" >> $GITHUB_OUTPUT; rm changes_made.txt

      - name: Commit files
        if: steps.apply_fixes.outputs.overall_commit_made == 'true'
        run: |
          git config --global user.email "ai-fixer-bot@online-everything-tool.com"
          git config --global user.name "OET AI Fixer Bot"
          git add -A 
          git commit -m "chore: AI-assisted lint fixes & update status"

      - name: Push changes
        if: steps.apply_fixes.outputs.overall_commit_made == 'true'
        uses: ad-m/github-push-action@v0.8.0
        with:
          branch: ${{ env.PR_HEAD_BRANCH }} 
          github_token: ${{ secrets.AI_LINT_FIXER_PAT }} 
          force: false
      
      - name: Prepare Outputs for ALF Comment
        id: prepare_alf_comment_data
        if: always() && steps.log_context.outputs.setup_failed != 'true'
        run: |
          echo "Setting up environment variables for ALF comment script..."
          echo "PR_NUMBER_ALF=${{ env.PR_NUMBER }}" >> $GITHUB_ENV
          echo "ARTIFACT_VALID_ACTIONABLE_ALF=${{ steps.check_artifact.outputs.artifact_is_valid_and_actionable }}" >> $GITHUB_ENV
          echo "LINT_FIXES_ATTEMPTED_ALF=${{ steps.read_tool_gen_info.outputs.lint_fixes_already_attempted }}" >> $GITHUB_ENV
          echo "API_CALL_SKIPPED_ALF=${{ steps.call_fix_api.outputs.api_call_skipped }}" >> $GITHUB_ENV
          echo "API_CALL_STEP_OUTCOME_ALF=${{ steps.call_fix_api.outcome }}" >> $GITHUB_ENV
          echo "API_RESPONSE_SUCCESS_ALF=${{ steps.call_fix_api.outputs.api_response_success }}" >> $GITHUB_ENV
          echo "APPLY_FIXES_STEP_OUTCOME_ALF=${{ steps.apply_fixes.outcome }}" >> $GITHUB_ENV
          echo "OVERALL_COMMIT_MADE_ALF=${{ steps.apply_fixes.outputs.overall_commit_made }}" >> $GITHUB_ENV
          echo "ACTUAL_CODE_CHANGES_ALF=${{ steps.apply_fixes.outputs.actual_code_changes_by_ai }}" >> $GITHUB_ENV
          echo "Comment data preparation complete."

      - name: Post Summary Comment to PR
        uses: actions/github-script@v7
        if: always() && steps.log_context.outputs.setup_failed != 'true'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = parseInt(process.env.PR_NUMBER_ALF, 10);
            if (isNaN(prNumber)) {
              core.warning("ALF: PR Number not available. Skipping comment.");
              return;
            }

            let commentBody = `## 🤖 AI Lint Fixer Results for PR #${prNumber}\n\n`;
            let alfShouldFailJob = false;

            const artifactValidAndActionable = process.env.ARTIFACT_VALID_ACTIONABLE_ALF === 'true';
            const lintFixesAlreadyAttempted = process.env.LINT_FIXES_ATTEMPTED_ALF === 'true';
            const apiCallSkipped = process.env.API_CALL_SKIPPED_ALF === 'true';
            const apiCallStepOutcome = process.env.API_CALL_STEP_OUTCOME_ALF; // 'success', 'failure', 'skipped'
            const apiResponseSuccess = process.env.API_RESPONSE_SUCCESS_ALF === 'true';
            const applyFixesStepOutcome = process.env.APPLY_FIXES_STEP_OUTCOME_ALF; // 'success', 'failure', 'skipped'
            const overallCommitMade = process.env.OVERALL_COMMIT_MADE_ALF === 'true';
            const actualCodeChangesByAi = process.env.ACTUAL_CODE_CHANGES_ALF === 'true';

            if (!artifactValidAndActionable) {
              commentBody += "ℹ️ ALF: No actionable lint failure artifact found. No lint fixing attempt by ALF.\n";
            } else if (lintFixesAlreadyAttempted) {
              commentBody += "ℹ️ ALF: Lint fixes were already marked as attempted for this tool version in `tool-generation-info.json`. No new attempt made.\n";
            } else if (apiCallSkipped) {
              commentBody += "ℹ️ ALF: AI API call skipped (e.g., no files found to fix after preparation). No lint fixing attempt by ALF.\n";
            } else {
              // Artifact was actionable, not already attempted, and API call was not skipped.
              // This means ALF *tried* to do something or was supposed to.
              if (apiCallStepOutcome !== 'success' || !apiResponseSuccess) {
                commentBody += `🚨 **ALF: AI Lint Fix API Call Failed or Reported Error.**\n`;
                commentBody += `   - API Call Step Outcome: \`${apiCallStepOutcome || 'N/A'}\`\n`;
                commentBody += `   - API Reported Success: \`${apiResponseSuccess}\`\n`;
                commentBody += `   Manual review of lint errors is likely needed. \`tool-generation-info.json\` was not updated by this process.\n`;
                alfShouldFailJob = true;
              } else if (overallCommitMade) {
                if (actualCodeChangesByAi) {
                  commentBody += "✅ ALF: AI-assisted lint fixes applied to code, `tool-generation-info.json` updated. Changes have been pushed.\n";
                } else {
                  commentBody += "✅ ALF: `tool-generation-info.json` updated (no actual code changes by AI). Changes have been pushed.\n";
                }
              } else if (applyFixesStepOutcome === 'success') { // API call was success, but no commit made
                commentBody += "ℹ️ ALF: AI processed files but made no changes to code, and `tool-generation-info.json` was already up-to-date or not found. No commit made.\n";
              } else if (applyFixesStepOutcome !== 'success' && applyFixesStepOutcome !== 'skipped' ) {
                commentBody += `🚨 **ALF: Failed to apply fixes or update status file after successful API call.**\n`;
                commentBody += `   - Apply Fixes Step Outcome: \`${applyFixesStepOutcome || 'N/A'}\`\n`;
                commentBody += `   Manual review may be needed.\n`;
                alfShouldFailJob = true;
              } else {
                commentBody += "⚠️ ALF: Reached an unexpected state after AI API call. Please review workflow logs.\n";
                // Decide if this unexpected state should cause a job failure
                // alfShouldFailJob = true;
              }
            }

            commentBody += `\n---\n*This is an automated update by AI Lint Fixer.*`;

            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
            } catch (e) {
              core.warning(`ALF: Failed to post PR comment: ${e.message}`);
            }

            if (alfShouldFailJob) {
              core.setFailed("ALF: Failed to complete lint fixing process or an error occurred.");
            }          

      - name: Final Status Log
        if: always() 
        run: |
          echo "--- ALF Final Status ---"
          if [ "${{ steps.log_context.outputs.setup_failed }}" == "true" ]; then
            echo "ALF concluded: Initial setup failed (e.g. PR_HEAD_SHA missing)."
          elif [ "${{ steps.check_artifact.outputs.artifact_is_valid_and_actionable }}" != "true" ]; then
            echo "ALF concluded: No actionable lint artifact found or it was invalid for this VPR failure."
          elif [ "${{ steps.read_tool_gen_info.outputs.lint_fixes_already_attempted }}" == "true" ]; then
            echo "ALF concluded: Lint fixes were already attempted for this tool version. No new attempt made."
          elif [ "${{ steps.call_fix_api.outputs.api_call_skipped }}" == "true" ]; then
            echo "ALF concluded: AI API call skipped (e.g., no files to fix after preparation)."
          elif [ "${{ steps.call_fix_api.outcome }}" != "success" ] || [ "${{ steps.call_fix_api.outputs.api_response_success }}" != "true" ]; then
            echo "ALF Warning: AI API call step failed or API did not report success. Job may have failed if API call exited with error."
          elif [ "${{ steps.apply_fixes.outputs.overall_commit_made }}" == "true" ]; then
            if [ "${{ steps.apply_fixes.outputs.actual_code_changes_by_ai }}" == "true" ]; then
              echo "ALF concluded: AI fixes applied to code, tool-generation-info.json updated, changes pushed."
            else
              echo "ALF concluded: No actual code changes by AI, but tool-generation-info.json updated. Changes pushed."
            fi
          elif [ "${{ steps.apply_fixes.outcome }}" == "success" ]; then 
             echo "ALF concluded: AI processed files but made no changes to code, and tool-generation-info.json was already up-to-date. No commit made."
          else
            echo "ALF concluded: No specific action taken or an unexpected state occurred. Review individual step logs."
          fi
          echo "For VPR run ID: ${{ env.TRIGGERING_WORKFLOW_RUN_ID }} on PR #${{ env.PR_NUMBER }}"