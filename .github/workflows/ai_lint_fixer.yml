# .github/workflows/ai_lint_fixer.yml
name: AI Lint Fixer

on:
  workflow_run:
    workflows: ['Validate Generated Tool PR']
    types:
      - completed

jobs:
  attempt_fix:
    name: Attempt AI Lint Fix
    if: >
      github.event.workflow_run.conclusion == 'failure' &&
      github.event.workflow_run.pull_requests[0] != null &&
      github.event.workflow_run.pull_requests[0].head.ref != github.event.repository.default_branch
    runs-on: ubuntu-latest
    permissions:
      contents: write 
      actions: read 
      pull-requests: write 
    env:
      # Use values from the triggering workflow's PR context, which should be reliable if VPR was synchronize-triggered
      PR_NUMBER: ${{ github.event.workflow_run.pull_requests[0].number }}
      PR_HEAD_SHA: ${{ github.event.workflow_run.pull_requests[0].head.sha }}
      PR_HEAD_BRANCH: ${{ github.event.workflow_run.pull_requests[0].head.ref }}
      TRIGGERING_WORKFLOW_RUN_ID: ${{ github.event.workflow_run.id }} # ID of the VPR run

    steps:
      - name: Log Effective Context
        run: |
          echo "--- ALF Effective Context from workflow_run event ---"
          echo "Attempting fix for PR #${{ env.PR_NUMBER }}"
          echo "Target Branch for Push: ${{ env.PR_HEAD_BRANCH }}"
          echo "Target Commit SHA for Checkout & Artifact: ${{ env.PR_HEAD_SHA }}"
          echo "Triggering VPR Workflow Run ID: ${{ env.TRIGGERING_WORKFLOW_RUN_ID }}"
          echo "Default repository branch: ${{ github.event.repository.default_branch }}"
          echo "----------------------------------------------------"
          if [ "${{ env.PR_HEAD_BRANCH }}" == "${{ github.event.repository.default_branch }}" ]; then
            echo "::error::ALF: PR_HEAD_BRANCH is the default branch. This job should have been skipped by the job-level 'if'. Exiting to prevent action on default branch."
            exit 1
          fi
          if [ -z "${{ env.PR_HEAD_SHA }}" ]; then
            echo "::error::ALF: PR_HEAD_SHA is empty. Cannot proceed."
            exit 1
          fi

      - name: Download Lint Failure Artifact
        id: download_artifact
        uses: actions/download-artifact@v4
        with:
          name: lint-failure-data-${{ env.PR_HEAD_SHA }} # Use SHA from reliable env var
          path: ${{ runner.temp }}/lint-data
          github-token: ${{ secrets.GITHUB_TOKEN }} 
          run-id: ${{ env.TRIGGERING_WORKFLOW_RUN_ID }} # VPR's run ID
        continue-on-error: true

      - name: Check if Artifact Exists and Contains Data
        id: check_artifact
        if: steps.download_artifact.outcome == 'success'
        run: |
          LINT_ERRORS_FILE="${{ runner.temp }}/lint-data/lint_errors.txt"
          FILES_TO_CHECK_FILE="${{ runner.temp }}/lint-data/files_to_check.txt"
          if [ -f "$LINT_ERRORS_FILE" ] && [ -s "$LINT_ERRORS_FILE" ] && \
             [ -f "$FILES_TO_CHECK_FILE" ] && [ -s "$FILES_TO_CHECK_FILE" ]; then
            echo "Lint failure artifacts found and are not empty."
            echo "artifact_valid=true" >> $GITHUB_OUTPUT
          else
            echo "::error::Lint failure artifact files not found or empty after download."
            echo "artifact_valid=false" >> $GITHUB_OUTPUT
            exit 1 
          fi

      - name: Checkout PR Code
        if: steps.check_artifact.outputs.artifact_valid == 'true'
        uses: actions/checkout@v4
        with:
          ref: ${{ env.PR_HEAD_SHA }} # Use SHA from reliable env var
          token: ${{ secrets.AI_LINT_FIXER_PAT }} # <<< USE PAT FOR CHECKOUT
          fetch-depth: 0 

      - name: Prepare Data for AI Lint Fix API
        id: prepare_fix_data
        if: steps.check_artifact.outputs.artifact_valid == 'true'
        run: |
          LINT_ERRORS_FILE="${{ runner.temp }}/lint-data/lint_errors.txt"
          FILES_TO_CHECK_FILE="${{ runner.temp }}/lint-data/files_to_check.txt"
          PR_FILES_JSON_PATH="${{ runner.temp }}/pr_files_for_lint_fix.json"
          echo '[' > $PR_FILES_JSON_PATH
          FIRST_FILE=true
          while IFS= read -r filepath; do
            if [ -z "$filepath" ]; then continue; fi;
            if [ -f "$filepath" ]; then
              if [ "$FIRST_FILE" = "false" ]; then echo ',' >> $PR_FILES_JSON_PATH; fi
              FILE_CONTENT_RAW=$(cat "$filepath")
              jq -n --arg path "$filepath" --arg content "$FILE_CONTENT_RAW" \
                '{path: $path, currentContent: $content}' >> $PR_FILES_JSON_PATH
              FIRST_FILE=false
            else
              echo "::warning::File path '$filepath' from artifact not found in checkout."
            fi
          done < "$FILES_TO_CHECK_FILE"
          echo ']' >> $PR_FILES_JSON_PATH
          # Ensure outer array is not nested if jq produced [[...]]
          jq -s 'if type == "array" and length > 0 and (.[0] | type) == "array" then .[0] else . end' $PR_FILES_JSON_PATH > temp_final.json && mv temp_final.json $PR_FILES_JSON_PATH
          echo "Prepared pr_files_for_lint_fix.json"

      - name: Call AI Lint Fix API
        id: call_fix_api
        if: steps.prepare_fix_data.outcome == 'success' && steps.check_artifact.outputs.artifact_valid == 'true'
        env:
          LINT_FIX_API_ENDPOINT: ${{ secrets.BACKEND_APP_URL }}/api/fix-linting-errors
        run: |
          LINT_ERRORS_CONTENT=$(cat "${{ runner.temp }}/lint-data/lint_errors.txt")
          LINT_ERRORS_JSON_ESCAPED=$(echo "$LINT_ERRORS_CONTENT" | jq -R -s '.')
          FILES_TO_FIX_JSON_CONTENT=$(cat "${{ runner.temp }}/pr_files_for_lint_fix.json")

          if ! echo "$FILES_TO_FIX_JSON_CONTENT" | jq -e 'type == "array" and length > 0' > /dev/null; then
            echo "::warning::No valid files to fix. Skipping API call."
            echo "api_call_skipped=true" >> $GITHUB_OUTPUT
            exit 0 
          fi

          API_PAYLOAD=$(jq -n \
            --argjson filesToFix "$FILES_TO_FIX_JSON_CONTENT" \
            --argjson lintErrors "$LINT_ERRORS_JSON_ESCAPED" \
            --arg modelName "models/gemini-1.5-pro-latest" \
            '{filesToFix: $filesToFix, lintErrors: $lintErrors, modelName: $modelName}')

          HTTP_RESPONSE_CODE=$(curl -s -w "%{http_code}" -X POST "$LINT_FIX_API_ENDPOINT" \
            -H "Content-Type: application/json" \
            -d "$API_PAYLOAD" \
            -o "${{ runner.temp }}/fix_response.json")
          echo "AI Lint Fix API HTTP Status: $HTTP_RESPONSE_CODE"
          cat "${{ runner.temp }}/fix_response.json"

          if [ "$HTTP_RESPONSE_CODE" -ne 200 ] || ! jq -e . "${{ runner.temp }}/fix_response.json" > /dev/null 2>&1; then
             echo "::error::AI Lint Fix API call failed or returned invalid JSON."
             exit 1
          fi
          echo "api_response_success=$(jq -r .success "${{ runner.temp }}/fix_response.json")" >> $GITHUB_OUTPUT
          echo "api_response_path=${{ runner.temp }}/fix_response.json" >> $GITHUB_OUTPUT
          echo "api_call_skipped=false" >> $GITHUB_OUTPUT

      - name: Apply AI Fixes to Local Files
        if: steps.call_fix_api.outputs.api_call_skipped != 'true' && steps.call_fix_api.outputs.api_response_success == 'true' && steps.check_artifact.outputs.artifact_valid == 'true'
        id: apply_fixes_locally
        run: |
          FIX_RESPONSE_FILE="${{ steps.call_fix_api.outputs.api_response_path }}"
          CHANGES_MADE_MARKER_FILE=$(mktemp); echo "false" > "$CHANGES_MADE_MARKER_FILE"
          LAST_COMMIT_MSG_ON_BRANCH=$(git log -1 --pretty=%B)
          if [[ "$LAST_COMMIT_MSG_ON_BRANCH" == "chore: AI-assisted lint fixes" ]]; then
            echo "::warning::Latest commit is already an AI lint fix. Skipping apply/commit/push."
            echo "changes_made=false" >> $GITHUB_OUTPUT; echo "skipped_due_to_prior_fix=true" >> $GITHUB_OUTPUT
            rm "$CHANGES_MADE_MARKER_FILE"; exit 0
          fi; echo "skipped_due_to_prior_fix=false" >> $GITHUB_OUTPUT
          
          FILE_PATHS_TO_PROCESS=$(jq -r '.fixedFiles | to_entries[] | select(.value != null) | .key' "$FIX_RESPONSE_FILE" 2>/dev/null || echo "")
          if [ -z "$FILE_PATHS_TO_PROCESS" ]; then
            echo "No files with non-null fixed content in API response."
          else
            for filepath_from_jq in $FILE_PATHS_TO_PROCESS; do
              filepath=$(echo "$filepath_from_jq" | xargs) 
              if [ -z "$filepath" ]; then continue; fi
              fixedcontent=$(jq -r --arg pathkey "$filepath" '.fixedFiles[$pathkey]' "$FIX_RESPONSE_FILE")
              if [ "$fixedcontent" = "null" ] || [ -z "$fixedcontent" ] || [ ! -f "$filepath" ]; then continue; fi
              if [ "$(cat "$filepath" | tr -d '\r')" != "$(echo "$fixedcontent" | tr -d '\r')" ]; then
                echo "Applying fix to '$filepath'."
                echo "$fixedcontent" > "$filepath"; echo "true" > "$CHANGES_MADE_MARKER_FILE"
              fi
            done
          fi
          echo "changes_made=$(cat "$CHANGES_MADE_MARKER_FILE")" >> $GITHUB_OUTPUT
          rm "$CHANGES_MADE_MARKER_FILE"

      - name: Commit files
        if: steps.apply_fixes_locally.outputs.changes_made == 'true' && steps.apply_fixes_locally.outputs.skipped_due_to_prior_fix != 'true'
        run: |
          git config --global user.email "ai-fixer-bot@online-everything-tool.com"
          git config --global user.name "OET AI Fixer Bot"
          git add -A 
          git commit -m "chore: AI-assisted lint fixes"

      - name: Push changes
        if: steps.apply_fixes_locally.outputs.changes_made == 'true' && steps.apply_fixes_locally.outputs.skipped_due_to_prior_fix != 'true'
        uses: ad-m/github-push-action@v0.8.0
        with:
          branch: ${{ env.PR_HEAD_BRANCH }} # Use reliable env var
          github_token: ${{ secrets.AI_LINT_FIXER_PAT }} 
          force: false

      # No /revalidate-ai-fixes comment from ALF anymore, VPR triggers on synchronize
      - name: Log Completion Status
        if: always()
        run: |
          echo "ALF run completed."
          if [ "${{ steps.apply_fixes_locally.outputs.changes_made }}" == "true" ] && [ "${{ steps.apply_fixes_locally.outputs.skipped_due_to_prior_fix }}" != "true" ]; then
            echo "AI fixes were applied and pushed."
          elif [ "${{ steps.apply_fixes_locally.outputs.skipped_due_to_prior_fix }}" == "true" ]; then
            echo "AI fixes skipped as prior commit was already an AI fix."
          elif [ "${{ steps.call_fix_api.outputs.api_call_skipped }}" == "true" ]; then
            echo "AI API call was skipped (e.g. no files to fix)."
          elif [ "${{ steps.call_fix_api.outputs.api_response_success }}" != "true" ]; then
            echo "AI API call did not report success or failed."
          elif [ "${{ steps.apply_fixes_locally.outputs.changes_made }}" != "true" ]; then
            echo "AI processed files but made no actual changes to content."
          elif [ "${{ steps.check_artifact.outputs.artifact_valid }}" != "true" ]; then
            echo "Lint artifact was invalid or not found."
          else
            echo "No specific action taken or changes made by AI."
          fi