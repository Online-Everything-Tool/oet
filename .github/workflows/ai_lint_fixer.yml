# .github/workflows/ai_lint_fixer.yml
name: AI Lint Fixer

on:
  workflow_run:
    workflows: ['Validate Generated Tool PR']
    types:
      - completed

jobs:
  attempt_fix:
    name: Attempt AI Lint Fix
    if: >
      github.event.workflow_run.conclusion == 'failure' &&
      github.event.workflow_run.pull_requests[0] != null &&
      github.event.workflow_run.pull_requests[0].head.ref != github.event.repository.default_branch
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
      pull-requests: write
    env:
      PR_NUMBER: ${{ github.event.workflow_run.pull_requests[0].number }}
      PR_HEAD_SHA: ${{ github.event.workflow_run.pull_requests[0].head.sha }}
      PR_HEAD_BRANCH: ${{ github.event.workflow_run.pull_requests[0].head.ref }}
      TRIGGERING_WORKFLOW_RUN_ID: ${{ github.event.workflow_run.id }}

    steps:
      - name: Log Effective Context
        id: log_context
        run: |
          echo "--- ALF Context from workflow_run event ---"
          echo "Attempting fix for PR #${{ env.PR_NUMBER }} on branch ${{ env.PR_HEAD_BRANCH }} (SHA: ${{ env.PR_HEAD_SHA }})"
          echo "Triggering VPR Workflow Run ID: ${{ env.TRIGGERING_WORKFLOW_RUN_ID }}"
          echo "VPR Conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "-------------------------------------------"
          if [ -z "${{ env.PR_HEAD_SHA }}" ]; then
            echo "::error::ALF: PR_HEAD_SHA is empty. Cannot proceed."
            echo "setup_failed=true" >> $GITHUB_OUTPUT 
            exit 1 
          fi
          echo "setup_failed=false" >> $GITHUB_OUTPUT

      - name: Download Lint Failure Artifact
        id: download_artifact
        if: steps.log_context.outputs.setup_failed != 'true'
        uses: actions/download-artifact@v4
        with:
          name: lint-failure-data-${{ env.PR_HEAD_SHA }}
          path: ${{ runner.temp }}/lint-data
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ env.TRIGGERING_WORKFLOW_RUN_ID }}
        continue-on-error: true

      - name: Check if Artifact Is Valid and Actionable
        id: check_artifact
        if: steps.log_context.outputs.setup_failed != 'true'
        run: |
          if [ "${{ steps.download_artifact.outcome }}" != "success" ]; then
            echo "::notice::ALF: Lint failure artifact 'lint-failure-data-${{ env.PR_HEAD_SHA }}' not found or download failed."
            echo "artifact_is_valid_and_actionable=false" >> $GITHUB_OUTPUT
          else
            LINT_ERRORS_FILE="${{ runner.temp }}/lint-data/lint_errors.txt"
            FILES_TO_CHECK_FILE="${{ runner.temp }}/lint-data/files_to_check.txt"
            if [ -f "$LINT_ERRORS_FILE" ] && [ -s "$LINT_ERRORS_FILE" ] && \
               [ -f "$FILES_TO_CHECK_FILE" ] && [ -s "$FILES_TO_CHECK_FILE" ]; then
              echo "ALF: Lint failure artifact found and appears valid."
              echo "Contents of lint_errors.txt (first 500 chars):"; head -c 500 "$LINT_ERRORS_FILE"; echo
              echo "Contents of files_to_check.txt:"; cat "$FILES_TO_CHECK_FILE"; echo
              echo "artifact_is_valid_and_actionable=true" >> $GITHUB_OUTPUT
            else
              echo "::notice::ALF: Lint failure artifact downloaded, but 'lint_errors.txt' or 'files_to_check.txt' is missing or empty."
              echo "artifact_is_valid_and_actionable=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Checkout PR Code
        id: checkout_code
        if: steps.check_artifact.outputs.artifact_is_valid_and_actionable == 'true'
        uses: actions/checkout@v4
        with:
          ref: ${{ env.PR_HEAD_SHA }}
          token: ${{ secrets.AI_LINT_FIXER_PAT }} # Ensure this PAT has repo write access
          fetch-depth: 0

      - name: Read tool-generation-info.json to check lintFixesAttempted
        id: read_tool_gen_info
        if: steps.checkout_code.outcome == 'success'
        run: |
          RAW_BRANCH_NAME="${{ env.PR_HEAD_BRANCH }}"
          TOOL_DIRECTIVE_FROM_BRANCH=""
          if [[ "$RAW_BRANCH_NAME" == feat/gen-* ]]; then
            TOOL_DIRECTIVE_FROM_BRANCH=$(echo "$RAW_BRANCH_NAME" | sed 's|feat/gen-||' | sed 's/-[0-9]*$//')
          else
            echo "::warning::Branch name '${RAW_BRANCH_NAME}' does not match 'feat/gen-' pattern for tool-gen-info path."
            TOOL_DIRECTIVE_FROM_BRANCH="unknown-tool-directive" 
          fi

          TOOL_GEN_INFO_FILE_PATH_OUTPUT="" 
          LINT_FIXES_ATTEMPTED="false" 
          if [ "$TOOL_DIRECTIVE_FROM_BRANCH" != "unknown-tool-directive" ] && [ -n "$TOOL_DIRECTIVE_FROM_BRANCH" ]; then
            TOOL_GEN_INFO_FILE="app/tool/${TOOL_DIRECTIVE_FROM_BRANCH}/tool-generation-info.json"
            if [ -f "$TOOL_GEN_INFO_FILE" ]; then
              TOOL_GEN_INFO_FILE_PATH_OUTPUT="$TOOL_GEN_INFO_FILE" 
              if jq -e '.lintFixesAttempted' "$TOOL_GEN_INFO_FILE" > /dev/null 2>&1; then
                LINT_FIXES_ATTEMPTED_RAW=$(jq -r '.lintFixesAttempted // "false"' "$TOOL_GEN_INFO_FILE")
                if [ "$LINT_FIXES_ATTEMPTED_RAW" == "true" ]; then LINT_FIXES_ATTEMPTED="true"; fi
              fi
              echo "Read '$TOOL_GEN_INFO_FILE'. lintFixesAttempted: $LINT_FIXES_ATTEMPTED"
            else
              echo "::notice::ALF: '$TOOL_GEN_INFO_FILE' not found. Assuming lint fixes have not been attempted."
            fi
          else
             echo "::warning::ALF: Tool directive could not be derived from branch. Cannot reliably check or update tool-generation-info.json."
          fi
          echo "lint_fixes_already_attempted=$LINT_FIXES_ATTEMPTED" >> $GITHUB_OUTPUT
          echo "derived_tool_directive_for_path=$TOOL_DIRECTIVE_FROM_BRANCH" >> $GITHUB_OUTPUT
          echo "tool_gen_info_file_path_for_update=$TOOL_GEN_INFO_FILE_PATH_OUTPUT" >> $GITHUB_OUTPUT

      - name: Prepare Data for AI Lint Fix API
        id: prepare_fix_data
        if: steps.read_tool_gen_info.outputs.lint_fixes_already_attempted != 'true' && steps.check_artifact.outputs.artifact_is_valid_and_actionable == 'true'
        run: |
          LINT_ERRORS_FILE="${{ runner.temp }}/lint-data/lint_errors.txt"
          FILES_TO_CHECK_FILE="${{ runner.temp }}/lint-data/files_to_check.txt"
          PR_FILES_JSON_PATH="${{ runner.temp }}/pr_files_for_lint_fix.json"
          JQ_TEMP_OUTPUT_FILE="${{ runner.temp }}/jq_processed_files.json"

          echo "Creating JSON array of file contents..."
          echo '[' > "$PR_FILES_JSON_PATH"
          FIRST_FILE=true
          if [ -s "$FILES_TO_CHECK_FILE" ] && [ "$(tail -c1 "$FILES_TO_CHECK_FILE"; echo x)" != $'\nx' ]; then
            echo >> "$FILES_TO_CHECK_FILE" # Add newline if missing at EOF
          fi

          while IFS= read -r filepath || [ -n "$filepath" ]; do
            trimmed_filepath=$(echo "$filepath" | tr -d '\r' | xargs)
            if [ -z "$trimmed_filepath" ]; then continue; fi
            echo "Processing file from artifact for JSON prep: '$trimmed_filepath'"
            if [ -f "$trimmed_filepath" ]; then
              if [ "$FIRST_FILE" = "false" ]; then echo ',' >> "$PR_FILES_JSON_PATH"; fi
              file_content_size=$(wc -c < "$trimmed_filepath")
              echo "Size of '$trimmed_filepath': $file_content_size bytes"
              # Use --rawfile to handle multiline content correctly with jq
              jq -n --arg path "$trimmed_filepath" --rawfile content "$trimmed_filepath" \
                '{path: $path, currentContent: $content}' >> "$PR_FILES_JSON_PATH"
              FIRST_FILE=false
            else echo "::warning::File path '$trimmed_filepath' from artifact not found in checkout."; fi
          done < "$FILES_TO_CHECK_FILE"
          echo ']' >> "$PR_FILES_JSON_PATH"
          
          # Validate and clean up potential extra array wrapping if jq produced nested arrays by mistake
          if jq -s 'if type == "array" and length > 0 and (.[0] | type) == "array" then .[0] else . end' "$PR_FILES_JSON_PATH" > "$JQ_TEMP_OUTPUT_FILE"; then
            if [ -s "$JQ_TEMP_OUTPUT_FILE" ]; then mv "$JQ_TEMP_OUTPUT_FILE" "$PR_FILES_JSON_PATH"; fi
          else
            echo "::error::jq post-processing command failed for $PR_FILES_JSON_PATH."; cat "$PR_FILES_JSON_PATH"; exit 1;
          fi
          echo "Final prepared JSON for API in $PR_FILES_JSON_PATH (first 500 chars):"; head -c 500 "$PR_FILES_JSON_PATH"; echo

      - name: Call AI Lint Fix API
        id: call_fix_api
        if: steps.prepare_fix_data.outcome == 'success'
        env:
          LINT_FIX_API_ENDPOINT: ${{ secrets.BACKEND_APP_URL }}/api/fix-linting-errors
        run: |
          LINT_ERRORS_CONTENT=$(cat "${{ runner.temp }}/lint-data/lint_errors.txt")
          LINT_ERRORS_JSON_ESCAPED=$(echo "$LINT_ERRORS_CONTENT" | jq -R -s '.')
          FILES_TO_FIX_JSON_CONTENT=$(cat "${{ runner.temp }}/pr_files_for_lint_fix.json")

          if ! echo "$FILES_TO_FIX_JSON_CONTENT" | jq -e 'type == "array" and length > 0 and .[0].path' > /dev/null 2>&1; then
            echo "::warning::No valid files with paths found in JSON to fix. Skipping API call."
            echo "Content of pr_files_for_lint_fix.json that caused skip:"; cat "${{ runner.temp }}/pr_files_for_lint_fix.json"
            echo "api_call_skipped=true" >> $GITHUB_OUTPUT; exit 0
          fi; echo "api_call_skipped=false" >> $GITHUB_OUTPUT

          API_PAYLOAD=$(jq -n --argjson filesToFix "$FILES_TO_FIX_JSON_CONTENT" --argjson lintErrors "$LINT_ERRORS_JSON_ESCAPED" '{filesToFix: $filesToFix, lintErrors: $lintErrors}')

          echo "Size of API_PAYLOAD: $(echo -n "$API_PAYLOAD" | wc -c) bytes"; 
          # echo "API_PAYLOAD (first 1k/last 1k chars):"; echo "$API_PAYLOAD" | head -c 1000; echo; echo "$API_PAYLOAD" | tail -c 1000; echo # Verbose

          HTTP_RESPONSE_CODE=$(curl -s -w "%{http_code}" -X POST "$LINT_FIX_API_ENDPOINT" -H "Content-Type: application/json" -d "$API_PAYLOAD" -o "${{ runner.temp }}/fix_response.json")

          echo "AI Lint Fix API HTTP Status: $HTTP_RESPONSE_CODE"
          # echo "--- Full AI API Response (fix_response.json) ---" # Verbose
          if [ -f "${{ runner.temp }}/fix_response.json" ]; then echo "Response Size: $(wc -c < "${{ runner.temp }}/fix_response.json") bytes"; else echo "fix_response.json not created."; fi
          # echo "--- End of Full AI API Response ---" # Verbose

          if [ "$HTTP_RESPONSE_CODE" -ne 200 ] || ! jq -e . "${{ runner.temp }}/fix_response.json" > /dev/null 2>&1; then
             echo "::error::AI Lint Fix API call failed or returned invalid JSON."
             echo "api_response_success=false" >> $GITHUB_OUTPUT; return # Use return to avoid exit 1 if further steps depend on this output
          fi
          echo "api_response_success=$(jq -r .success "${{ runner.temp }}/fix_response.json")" >> $GITHUB_OUTPUT
          echo "api_response_path=${{ runner.temp }}/fix_response.json" >> $GITHUB_OUTPUT

      - name: Apply AI Fixes and Update Status File
        if: steps.call_fix_api.outcome == 'success' && steps.call_fix_api.outputs.api_call_skipped != 'true' && steps.call_fix_api.outputs.api_response_success == 'true'
        id: apply_fixes
        run: |
          FIX_RESPONSE_FILE="${{ steps.call_fix_api.outputs.api_response_path }}"
          ALL_FIX_DESCRIPTIONS_PATH="${{ runner.temp }}/all_fix_descriptions.md" # New file for descriptions
          echo "" > "$ALL_FIX_DESCRIPTIONS_PATH" # Initialize empty

          ANY_ACTUAL_CODE_CHANGES_BY_AI="false"
          TOOL_GEN_INFO_UPDATED_THIS_RUN="false"
          COMMIT_NEEDED="false" 

          TOOL_GEN_INFO_FILE_TO_UPDATE="${{ steps.read_tool_gen_info.outputs.tool_gen_info_file_path_for_update }}"

          # Updated jq query to check for fixedFileResults and non-null fixedContent
          if jq -e '.fixedFileResults | type == "object" and (length > 0)' "$FIX_RESPONSE_FILE" > /dev/null 2>&1; then
            # Get file paths where fixedContent is not null and not an empty string
            FILE_PATHS_TO_PROCESS=$(jq -r '.fixedFileResults | to_entries[] | select(.value.fixedContent != null and .value.fixedContent != "") | .key' "$FIX_RESPONSE_FILE" 2>/dev/null || echo "")
            
            if [ -n "$FILE_PATHS_TO_PROCESS" ]; then
              echo "ALF: Applying AI fixes to files specified in API response..."
              for filepath_from_jq in $FILE_PATHS_TO_PROCESS; do
                filepath=$(echo "$filepath_from_jq" | xargs); if [ -z "$filepath" ]; then continue; fi
                
                if [ ! -f "$filepath" ]; then
                    echo "::warning::ALF: File '$filepath' from API response not found in local checkout. Skipping overwrite."
                    continue
                fi

                # Get fixedContent
                fixedcontent=$(jq -r --arg pathkey "$filepath" '.fixedFileResults[$pathkey].fixedContent' "$FIX_RESPONSE_FILE")
                echo "Applying AI-proposed content to '$filepath'."
                echo "$fixedcontent" > "$filepath" 
                ANY_ACTUAL_CODE_CHANGES_BY_AI="true"

                # Get fixDescription
                fixdescription=$(jq -r --arg pathkey "$filepath" '.fixedFileResults[$pathkey].fixDescription // ""' "$FIX_RESPONSE_FILE")
                if [ -n "$fixdescription" ] && [ "$fixdescription" != "null" ]; then
                  echo "### File: \`$filepath\`" >> "$ALL_FIX_DESCRIPTIONS_PATH"
                  echo "$fixdescription" >> "$ALL_FIX_DESCRIPTIONS_PATH"
                  echo "" >> "$ALL_FIX_DESCRIPTIONS_PATH" # Add a newline for separation
                fi
              done
            else
              echo "ALF: '.fixedFileResults' from API was present but all 'fixedContent' entries were null or empty. No code changes applied."
            fi
          else
            echo "ALF: No '.fixedFileResults' key in API response or it was empty. No code changes to apply."
          fi

          if [ "$ANY_ACTUAL_CODE_CHANGES_BY_AI" == "true" ]; then
            COMMIT_NEEDED="true"
            if [ "${{ steps.read_tool_gen_info.outputs.lint_fixes_already_attempted }}" == "false" ]; then
              if [ -n "$TOOL_GEN_INFO_FILE_TO_UPDATE" ] && [ -f "$TOOL_GEN_INFO_FILE_TO_UPDATE" ]; then
                  if ! jq -e '.lintFixesAttempted == true' "$TOOL_GEN_INFO_FILE_TO_UPDATE" > /dev/null 2>&1; then
                      jq '.lintFixesAttempted = true' "$TOOL_GEN_INFO_FILE_TO_UPDATE" > tmp_tool_gen_info.json && mv tmp_tool_gen_info.json "$TOOL_GEN_INFO_FILE_TO_UPDATE"
                      echo "ALF: Updated '$TOOL_GEN_INFO_FILE_TO_UPDATE': set lintFixesAttempted=true."
                      TOOL_GEN_INFO_UPDATED_THIS_RUN="true"
                  fi
              else
                  echo "::warning::ALF: Path to tool-generation-info.json ('$TOOL_GEN_INFO_FILE_TO_UPDATE') is invalid or file not found. Cannot mark lintFixesAttempted."
              fi
            fi
          else
            echo "ALF: No actual code changes made by AI. No commit will be made by this ALF run."
          fi

          echo "actual_code_changes_by_ai_output=$ANY_ACTUAL_CODE_CHANGES_BY_AI" >> $GITHUB_OUTPUT
          echo "tool_gen_info_updated_output=$TOOL_GEN_INFO_UPDATED_THIS_RUN" >> $GITHUB_OUTPUT
          echo "overall_commit_needed_output=$COMMIT_NEEDED" >> $GITHUB_OUTPUT
          echo "all_fix_descriptions_file_path=$ALL_FIX_DESCRIPTIONS_PATH" >> $GITHUB_OUTPUT # Output path to descriptions file

      - name: Commit files
        id: commit_step
        if: steps.apply_fixes.outputs.overall_commit_needed_output == 'true'
        run: |
          git config --global user.email "ai-fixer-bot@online-everything-tool.com"
          git config --global user.name "OET AI Fixer Bot"
          git add -A 

          COMMIT_MESSAGE="chore: AI-assisted lint fixes"
          if [ "${{ steps.apply_fixes.outputs.tool_gen_info_updated_output }}" == "true" ]; then
            COMMIT_MESSAGE="chore: AI-assisted lint fixes & update status"
          fi

          if ! git diff --cached --quiet; then
            git commit -m "$COMMIT_MESSAGE"
            echo "Committed changes with message: $COMMIT_MESSAGE"
            echo "commit_actually_made=true" >> $GITHUB_OUTPUT
          else
            echo "No staged changes found to commit."
            echo "commit_actually_made=false" >> $GITHUB_OUTPUT
          fi

      - name: Push changes
        if: steps.commit_step.outputs.commit_actually_made == 'true'
        uses: ad-m/github-push-action@v0.8.0
        with:
          branch: ${{ env.PR_HEAD_BRANCH }}
          github_token: ${{ secrets.AI_LINT_FIXER_PAT }}
          force: false

      - name: Prepare Outputs for ALF Comment
        id: prepare_alf_comment_data
        if: always() && steps.log_context.outputs.setup_failed != 'true'
        run: |
          echo "Setting up environment variables for ALF comment script..."
          echo "PR_NUMBER_ALF=${{ env.PR_NUMBER }}" >> $GITHUB_ENV
          echo "ARTIFACT_VALID_ACTIONABLE_ALF=${{ steps.check_artifact.outputs.artifact_is_valid_and_actionable }}" >> $GITHUB_ENV
          echo "LINT_FIXES_ALREADY_ATTEMPTED_PRE_RUN_ALF=${{ steps.read_tool_gen_info.outputs.lint_fixes_already_attempted }}" >> $GITHUB_ENV
          echo "API_CALL_SKIPPED_ALF=${{ steps.call_fix_api.outputs.api_call_skipped }}" >> $GITHUB_ENV
          echo "API_CALL_STEP_OUTCOME_ALF=${{ steps.call_fix_api.outcome }}" >> $GITHUB_ENV
          echo "API_RESPONSE_SUCCESS_ALF=${{ steps.call_fix_api.outputs.api_response_success }}" >> $GITHUB_ENV
          echo "ACTUAL_CODE_CHANGES_BY_AI_ALF=${{ steps.apply_fixes.outputs.actual_code_changes_by_ai_output }}" >> $GITHUB_ENV
          echo "COMMIT_ACTUALLY_MADE_BY_ALF=${{ steps.commit_step.outputs.commit_actually_made }}" >> $GITHUB_ENV
          
          # Pass the path to the descriptions file
          echo "ALL_FIX_DESCRIPTIONS_FILE_PATH_ALF=${{ steps.apply_fixes.outputs.all_fix_descriptions_file_path }}" >> $GITHUB_ENV
          echo "Comment data preparation complete."

      - name: Post Summary Comment to PR
        uses: actions/github-script@v7
        if: always() && steps.log_context.outputs.setup_failed != 'true'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = parseInt(process.env.PR_NUMBER_ALF, 10);
            if (isNaN(prNumber)) { core.warning("ALF: PR Number not available."); return; }

            let commentBody = `## 🤖 AI Lint Fixer Results for PR #${prNumber}\n\n`;
            let alfJobShouldFail = false; 

            const artifactValidAndActionable = process.env.ARTIFACT_VALID_ACTIONABLE_ALF === 'true';
            const lintFixesAlreadyAttemptedPreRun = process.env.LINT_FIXES_ALREADY_ATTEMPTED_PRE_RUN_ALF === 'true';
            const apiCallSkippedByAlfPreChecks = process.env.API_CALL_SKIPPED_ALF === 'true';
            const apiCallStepOutcome = process.env.API_CALL_STEP_OUTCOME_ALF;
            const apiResponseIndicatedSuccess = process.env.API_RESPONSE_SUCCESS_ALF === 'true';
            const actualCodeChangesMadeByAI = process.env.ACTUAL_CODE_CHANGES_BY_AI_ALF === 'true';
            // const commitActuallyMade = process.env.COMMIT_ACTUALLY_MADE_BY_ALF === 'true'; // Already used in actualCodeChangesMadeByAI logic for comment

            if (!artifactValidAndActionable) {
              commentBody += "ℹ️ ALF: No actionable lint failure artifact found. No action taken by ALF.\n";
            } else if (lintFixesAlreadyAttemptedPreRun) {
              commentBody += "ℹ️ ALF: Lint fixes were already marked as attempted. No new attempt made by ALF.\n";
            } else if (apiCallSkippedByAlfPreChecks) {
              commentBody += "ℹ️ ALF: AI API call was skipped by ALF internal logic (e.g., no files to fix). No action taken.\n";
            } else { 
              if (apiCallStepOutcome !== 'success' || !apiResponseIndicatedSuccess) {
                commentBody += `🚨 **ALF: AI Lint Fix API Call Failed or API Reported Error.**\n`;
                commentBody += `   - API Call Step Outcome: \`${apiCallStepOutcome || 'N/A'}\`\n`;
                commentBody += `   - API Reported Success in JSON: \`${apiResponseIndicatedSuccess}\`\n`;
                commentBody += `   No changes committed by ALF. \`tool-generation-info.json\` not updated.\n`;
                alfJobShouldFail = true; 
              } else { 
                if (actualCodeChangesMadeByAI) {
                    commentBody += "✅ ALF: AI-assisted lint fixes applied to code AND `tool-generation-info.json` updated (if applicable). Changes pushed.\n";
                    
                    // --- Add Fix Descriptions ---
                    const fs = require('fs');
                    const descriptionsFilePath = process.env.ALL_FIX_DESCRIPTIONS_FILE_PATH_ALF;
                    if (descriptionsFilePath && fs.existsSync(descriptionsFilePath)) {
                      const descriptionsContent = fs.readFileSync(descriptionsFilePath, 'utf8').trim();
                      if (descriptionsContent) {
                        commentBody += "\n**AI Fix Descriptions:**\n";
                        commentBody += descriptionsContent + "\n";
                      }
                    }
                    // --- End Add Fix Descriptions ---

                } else { 
                    commentBody += "⚠️ ALF: AI API call successful, but AI proposed no code changes or applied fixes were identical. No code files were modified by ALF. `tool-generation-info.json` status not updated. No commit made.\n";
                    alfJobShouldFail = true; 
                }
              }
            }
            commentBody += `\n---\n*This is an automated update by AI Lint Fixer.*`;
            try {
              await github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: prNumber, body: commentBody });
            } catch (e) {
              core.warning(`ALF: Failed to post PR comment: ${e.message}`);
            }

            if (alfJobShouldFail) {
              core.setFailed("ALF: Process either encountered an API error or resulted in no effective code changes where an attempt was warranted.");
            }