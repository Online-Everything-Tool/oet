name: Validate Generated Tool PR

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - main
  issue_comment:
    types: [created]

jobs:
  initial_checks:
    name: 1. Initial PR Validations
    if: >
      (
        github.event_name == 'pull_request' &&
        github.actor != 'dependabot[bot]'
      ) ||
      (
        github.event_name == 'issue_comment' &&
        github.event.issue.pull_request &&
        startsWith(github.event.comment.body, '/revalidate-ai-fixes') &&
        github.actor != 'dependabot[bot]'
      )
    runs-on: ubuntu-latest
    permissions:
      contents: read

    outputs:
      pr_number: ${{ steps.set_pr_info.outputs.pr_number }}
      pr_sha: ${{ steps.set_pr_info.outputs.pr_sha }}
      tool_directive: ${{ steps.extract_directive_and_metadata.outputs.tool_directive }}
      tool_description: ${{ steps.extract_directive_and_metadata.outputs.tool_description }}
      path_validation_passed: ${{ steps.validate_paths.outputs.validation_passed }}
      invalid_files_list: ${{ steps.validate_paths.outputs.invalid_files_list }}
      analysis_succeeded: ${{ steps.analyze_name.outputs.analysis_succeeded }}
      ai_analysis_score: ${{ steps.analyze_name.outputs.score }}
      ai_analysis_is_typo: ${{ steps.analyze_name.outputs.is_typo }}
      ai_analysis_suggestions_json: ${{ steps.analyze_name.outputs.suggestions }}
      ai_analysis_reasoning: ${{ steps.analyze_name.outputs.reasoning }}
      critical_initial_checks_passed: ${{ steps.validate_paths.outputs.validation_passed == 'true' }}

    steps:
      - name: Set PR Info and Validate Trigger
        id: set_pr_info
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "::group::Set PR Info and Validate Trigger Details"
          PR_NUMBER=""
          HEAD_REF=""
          PR_SHA=""
          SHOULD_RUN="false" # Default: do not run subsequent steps

          echo "Workflow triggered by event: ${{ github.event_name }}"
          if [ -n "${{ github.event.comment.body }}" ]; then
            echo "Comment body: ${{ github.event.comment.body }}"
          fi

          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "Handling 'pull_request' event..."
            PR_NUMBER="${{ github.event.pull_request.number }}"
            HEAD_REF="${{ github.head_ref }}"
            PR_SHA="${{ github.event.pull_request.head.sha }}"

            echo "PR Number: $PR_NUMBER"
            echo "Head Ref (Branch): $HEAD_REF"
            echo "PR SHA: $PR_SHA"

            if [[ "$HEAD_REF" == feat/gen-* ]]; then
              echo "Branch '$HEAD_REF' matches 'feat/gen-*' pattern."
              SHOULD_RUN="true"
            else
              echo "::warning::Branch '$HEAD_REF' does NOT match 'feat/gen-*' pattern. Subsequent steps will be skipped."
            fi

          elif [ "${{ github.event_name }}" == "issue_comment" ]; then
            echo "Handling 'issue_comment' event..."
            # The job-level 'if' condition already ensures:
            # 1. It's a comment on a PR (github.event.issue.pull_request is true)
            # 2. The comment starts with '/revalidate-ai-fixes'
            # So, we can proceed to fetch PR details.

            PR_NUMBER="${{ github.event.issue.number }}"
            echo "PR Number from comment event: $PR_NUMBER"
            echo "Fetching PR details from API for PR #$PR_NUMBER..."

            # Using -L to follow redirects, --fail to exit with error on HTTP > 400
            PR_DATA=$(curl -s -L --fail \
                           -H "Authorization: token $GITHUB_TOKEN" \
                           -H "Accept: application/vnd.github.v3+json" \
                           "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER")
            CURL_EXIT_CODE=$?

            if [ "$CURL_EXIT_CODE" -ne 0 ]; then
                echo "::error::Failed to fetch PR data using curl. HTTP request failed with exit code $CURL_EXIT_CODE."
                echo "API URL was: https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER"
                # SHOULD_RUN remains false
            else
                echo "Successfully fetched PR data from API."
                # echo "Raw PR Data: $PR_DATA" # Uncomment for deep debugging if needed

                HEAD_REF=$(echo "$PR_DATA" | jq -r .head.ref)
                PR_SHA=$(echo "$PR_DATA" | jq -r .head.sha)

                echo "Fetched Head Ref (Branch) from API: $HEAD_REF"
                echo "Fetched PR SHA from API: $PR_SHA"

                if [ -z "$HEAD_REF" ] || [ "$HEAD_REF" == "null" ]; then
                  echo "::error::Could not extract 'head.ref' from API response for PR #$PR_NUMBER."
                  echo "Parsed head.ref: '$HEAD_REF'"
                  # SHOULD_RUN remains false
                elif [[ "$HEAD_REF" == feat/gen-* ]]; then
                  echo "Fetched branch '$HEAD_REF' matches 'feat/gen-*' pattern."
                  SHOULD_RUN="true"
                else
                  echo "::warning::Fetched branch '$HEAD_REF' does NOT match 'feat/gen-*' pattern. Subsequent steps will be skipped."
                  # SHOULD_RUN remains false
                fi
            fi
          else
            echo "::error::Unhandled event type: ${{ github.event_name }}. Subsequent steps will be skipped."
            # SHOULD_RUN remains false
          fi

          echo "---"
          echo "Final determination for SHOULD_RUN: $SHOULD_RUN"
          echo "Final PR_NUMBER: $PR_NUMBER"
          echo "Final HEAD_REF: $HEAD_REF"
          echo "Final PR_SHA: $PR_SHA"
          echo "---"

          echo "pr_number=${PR_NUMBER}" >> $GITHUB_OUTPUT
          echo "head_ref=${HEAD_REF}" >> $GITHUB_OUTPUT
          echo "pr_sha=${PR_SHA}" >> $GITHUB_OUTPUT
          echo "should_run=${SHOULD_RUN}" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.set_pr_info.outputs.pr_sha }}
          fetch-depth: 0

      - name: Extract Tool Directive & Read Metadata Description
        if: steps.set_pr_info.outputs.should_run == 'true'
        id: extract_directive_and_metadata
        run: |
          BRANCH_NAME="${{ steps.set_pr_info.outputs.head_ref }}"
          TEMP_DIRECTIVE=${BRANCH_NAME#feat/gen-}
          TOOL_DIRECTIVE=$(echo "$TEMP_DIRECTIVE" | sed 's/-[0-9]*$//')
          
          if [ -z "$TOOL_DIRECTIVE" ]; then 
            echo "::error::Could not extract tool directive from branch name '$BRANCH_NAME'."
            echo "tool_directive=" >> $GITHUB_OUTPUT
            echo "tool_description=" >> $GITHUB_OUTPUT
            echo "metadata_ok=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "Extracted Tool Directive: $TOOL_DIRECTIVE"
          echo "tool_directive=${TOOL_DIRECTIVE}" >> $GITHUB_OUTPUT

          METADATA_FILE_PATH="app/tool/${TOOL_DIRECTIVE}/metadata.json"
          echo "Attempting to read metadata from: $METADATA_FILE_PATH"

          if [ ! -f "$METADATA_FILE_PATH" ]; then
            echo "::error file=${METADATA_FILE_PATH}::Required metadata.json file not found for tool directive '$TOOL_DIRECTIVE'."
            echo "tool_description=" >> $GITHUB_OUTPUT
            echo "metadata_ok=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          TOOL_DESCRIPTION=$(jq -r '.description // ""' "$METADATA_FILE_PATH")

          if [ -z "$TOOL_DESCRIPTION" ] || [ "$TOOL_DESCRIPTION" == "null" ]; then
            echo "::error file=${METADATA_FILE_PATH}::'description' field is missing, empty, or null in $METADATA_FILE_PATH."
            echo "tool_description=" >> $GITHUB_OUTPUT
            echo "metadata_ok=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "Successfully extracted tool description: $TOOL_DESCRIPTION"
          echo "tool_description=${TOOL_DESCRIPTION}" >> $GITHUB_OUTPUT
          echo "metadata_ok=true" >> $GITHUB_OUTPUT

      - name: Analyze Directive Name (AI Check)
        id: analyze_name
        env:
          APP_URL: ${{ secrets.APP_URL || 'https://online-everything-tool.com' }}
        run: |
          TOOL_DIRECTIVE="${{ steps.extract_directive_and_metadata.outputs.tool_directive }}"
          TOOL_DESCRIPTION="${{ steps.extract_directive_and_metadata.outputs.tool_description }}"
          # Ensure APP_URL is clean (no trailing slash) for constructing API_ENDPOINT
          CLEANED_APP_URL=$(echo "${APP_URL}" | sed 's:/*$::')
          API_ENDPOINT="${CLEANED_APP_URL}/api/analyze-directive-name" # No trailing slash

          EXISTING_DIRECTIVES_JSON='[]' 

          echo "Attempting AI Analysis API call to: $API_ENDPOINT for directive: $TOOL_DIRECTIVE"
          # Added -L to follow redirects for curl
          HTTP_STATUS=$(curl -L --max-redirs 3 -s -w "%{http_code}" -X POST "$API_ENDPOINT" \
            -H "Content-Type: application/json" \
            -d "{
                  \"proposedDirective\": \"$TOOL_DIRECTIVE\",
                  \"existingDirectives\": $EXISTING_DIRECTIVES_JSON,
                  \"generativeDescription\": \"$TOOL_DESCRIPTION\"
                }" \
            -o response.json)

          echo "AI Analysis API HTTP Status (after potential redirects): $HTTP_STATUS"
          ANALYSIS_SUCCEEDED_FLAG="false"; SCORE_VAL="N/A"; IS_TYPO_VAL="N/A"; SUGGESTIONS_JSON_STR="[]"; REASONING_TEXT="Analysis could not be performed."

          if [[ "$HTTP_STATUS" -ge 200 && "$HTTP_STATUS" -lt 300 ]] && jq -e . response.json > /dev/null 2>&1; then
             echo "AI Analysis API call successful and response is valid JSON."
             SCORE_VAL=$(jq -r '.score // 0.5' response.json)
             IS_TYPO_VAL=$(jq -r '.is_likely_typo // false' response.json)
             SUGGESTIONS_JSON_STR=$(jq -c '.suggestions // []' response.json) 
             REASONING_TEXT=$(jq -r '.reasoning // "Analysis incomplete."' response.json)
             ANALYSIS_SUCCEEDED_FLAG="true"
          else
             echo "::warning::AI Analysis API call failed or returned invalid JSON (HTTP Status: $HTTP_STATUS). Analysis results will be marked as N/A."
          fi

          echo "analysis_succeeded=$ANALYSIS_SUCCEEDED_FLAG" >> $GITHUB_OUTPUT
          echo "score=$SCORE_VAL" >> $GITHUB_OUTPUT
          echo "is_typo=$IS_TYPO_VAL" >> $GITHUB_OUTPUT
          echo "suggestions=$SUGGESTIONS_JSON_STR" >> $GITHUB_OUTPUT
          {
            echo "reasoning<<EOF_REASONING"
            echo "$REASONING_TEXT"
            echo "EOF_REASONING"
          } >> $GITHUB_OUTPUT

      - name: Validate Changed File Paths
        if: |
          steps.extract_directive_and_metadata.outputs.metadata_ok == 'true' &&
          github.event_name == 'pull_request' &&
          github.event.action == 'opened'
        id: validate_paths
        env:
          TOOL_DIRECTIVE: ${{ steps.extract_directive_and_metadata.outputs.tool_directive }}
        run: |
          echo "Running path validation because it's a 'pull_request.opened' event."    
          if [ -z "$TOOL_DIRECTIVE" ]; then 
            echo "::error::TOOL_DIRECTIVE not set for path validation."
            echo "validation_passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          git fetch origin main --depth=1 
          BASE_SHA=$(git merge-base HEAD origin/main)
          if [ -z "$BASE_SHA" ]; then 
            echo "::error::Could not determine merge base with main branch."
            echo "validation_passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          CHANGED_FILES_WITH_STATUS=$(git diff --name-status $BASE_SHA HEAD)
          if [ -z "$CHANGED_FILES_WITH_STATUS" ]; then 
            echo "No files changed compared to main. Assuming pass for path validation."
            echo "validation_passed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          ALLOWED_FOLDER_PATTERN="^app/tool/${TOOL_DIRECTIVE}/"
          INVALID_FILES_FOUND=""
          ALL_PATHS_VALID=true
          echo "Validating changed file paths against pattern: $ALLOWED_FOLDER_PATTERN"
          echo "Changed files (Status Path):"
          echo "$CHANGED_FILES_WITH_STATUS"
          echo "$CHANGED_FILES_WITH_STATUS" | while IFS=$'\t' read -r status filepath; do
            if [ -z "$filepath" ]; then continue; fi
            if [[ "$status" == "A" || "$status" == "M" || "$status" == "C" || "$status" == "R" ]]; then 
              actual_path_to_check=$filepath
              if [[ "$status" == "R"* ]]; then 
                  echo "Rename detected, checking path: $filepath"
              fi
              if [[ ! "$actual_path_to_check" =~ $ALLOWED_FOLDER_PATTERN ]]; then
                echo "::error file=$actual_path_to_check::Invalid path. File status: $status. Must be within '$ALLOWED_FOLDER_PATTERN'."
                INVALID_FILES_FOUND="${INVALID_FILES_FOUND}${actual_path_to_check} (Status: ${status})\n"
                ALL_PATHS_VALID=false
              else
                echo "Valid path: $actual_path_to_check (Status: $status)"
              fi
            else
              echo "Skipping strict path validation for file with status '$status': $filepath"
            fi
          done
          if $ALL_PATHS_VALID; then
            echo "validation_passed=true" >> $GITHUB_OUTPUT
          else
            echo "validation_passed=false" >> $GITHUB_OUTPUT
            INVALID_FILES_ESCAPED="${INVALID_FILES_FOUND//'%'/'%25'}"
            INVALID_FILES_ESCAPED="${INVALID_FILES_ESCAPED//$'\n'/'%0A'}"
            INVALID_FILES_ESCAPED="${INVALID_FILES_ESCAPED//$'\r'/'%0D'}"
            echo "invalid_files_list=${INVALID_FILES_ESCAPED}" >> $GITHUB_OUTPUT
            exit 1
          fi

  # --- NEW JOB FOR DEPENDENCY ANALYSIS ---
  analyze_dependencies:
    name: 1B. Analyze & Prepare Dependencies
    needs: initial_checks
    if: success() && needs.initial_checks.outputs.critical_initial_checks_passed == 'true'
    runs-on: ubuntu-latest
    outputs:
      dependency_action_required: ${{ steps.check_deps.outputs.action_required }}
      # This output tells other jobs (and ai-dependency-manager via workflow_run event) if action is needed
    permissions:
      contents: read # To read package.json, tool-generation-info.json
      actions: write # To upload artifact

    steps:
      - name: Checkout PR Code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.initial_checks.outputs.pr_sha }}

      - name: Check for New Undeclared Dependencies
        id: check_deps
        env:
          TOOL_DIRECTIVE: ${{ needs.initial_checks.outputs.tool_directive }}
          TOOL_DESCRIPTION: ${{ needs.initial_checks.outputs.tool_description }}
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.
          echo "--- Starting: Check for New Undeclared Dependencies ---"
          echo "Tool Directive: $TOOL_DIRECTIVE"
          echo "Tool Description: $TOOL_DESCRIPTION"

          ARTIFACT_CONTENT_PATH="${{ runner.temp }}/pending_dependencies.json"
          TOOL_INFO_FILE_PATH="app/tool/${TOOL_DIRECTIVE}/tool-generation-info.json"
          PACKAGE_JSON_FILE_PATH="package.json"

          if [ -z "$TOOL_DIRECTIVE" ]; then
            echo "::error::Environment variable TOOL_DIRECTIVE is not set."
            exit 1
          fi
          if [ ! -f "$PACKAGE_JSON_FILE_PATH" ]; then
            echo "::error::'$PACKAGE_JSON_FILE_PATH' not found. Cannot proceed."
            exit 1
          fi

          if [ ! -f "$TOOL_INFO_FILE_PATH" ]; then
            echo "::notice::'$TOOL_INFO_FILE_PATH' not found for tool '${TOOL_DIRECTIVE}'. Assuming no AI-identified dependencies or asset instructions."
            echo "action_required=false" >> $GITHUB_OUTPUT
            echo "--- Finished: No tool-generation-info.json found ---"
            exit 0
          fi

          echo "Reading 'tool-generation-info.json' from: $TOOL_INFO_FILE_PATH"
          IDENTIFIED_DEPS_JSON_STR=$(jq -r 'if .identifiedDependencies and (.identifiedDependencies | type == "array") then .identifiedDependencies | tojson else "[]" end' "$TOOL_INFO_FILE_PATH")
          ASSET_INSTRUCTIONS_STR=$(jq -r '.assetInstructions // ""' "$TOOL_INFO_FILE_PATH")

          if [ "$(echo "$IDENTIFIED_DEPS_JSON_STR" | jq -r 'length')" -eq 0 ]; then
            echo "No 'identifiedDependencies' array found or it is empty in '$TOOL_INFO_FILE_PATH'."
            echo "action_required=false" >> $GITHUB_OUTPUT
            echo "--- Finished: No identified dependencies ---"
            exit 0
          fi

          TEMP_NEW_DEPS_ACCUMULATOR_FILE=$(mktemp)
          echo "[]" > "$TEMP_NEW_DEPS_ACCUMULATOR_FILE" # Initialize as empty JSON array

          FOUND_NEW_DEP_MARKER_FILE=$(mktemp)
          echo "false" > "$FOUND_NEW_DEP_MARKER_FILE"

          echo "Comparing identified dependencies with '$PACKAGE_JSON_FILE_PATH'..."
          echo "$IDENTIFIED_DEPS_JSON_STR" | jq -c '.[]' | while IFS= read -r dep_obj_json; do
            packageName=$(echo "$dep_obj_json" | jq -r '.packageName')
            if [ "$packageName" = "null" ] || [ -z "$packageName" ]; then
              echo "::warning::Skipping a dependency entry with no packageName in '$TOOL_INFO_FILE_PATH'."
              continue
            fi

            if ! jq -e --arg pkg "$packageName" '((.dependencies // {})[$pkg]) or ((.devDependencies // {})[$pkg])' "$PACKAGE_JSON_FILE_PATH" > /dev/null; then
              echo "  New dependency found: '$packageName'. Adding to list for vetting."
              current_array_content=$(cat "$TEMP_NEW_DEPS_ACCUMULATOR_FILE")
              echo "$current_array_content" | jq --argjson obj "$dep_obj_json" '. + [$obj]' > "$TEMP_NEW_DEPS_ACCUMULATOR_FILE"
              echo "true" > "$FOUND_NEW_DEP_MARKER_FILE"
            else
              echo "  Dependency '$packageName' already exists in '$PACKAGE_JSON_FILE_PATH'."
            fi
          done

          FINAL_ACTION_REQUIRED="false"
          if [ "$(cat "$FOUND_NEW_DEP_MARKER_FILE")" = "true" ]; then
            FINAL_ACTION_REQUIRED="true"
          fi

          if [ "$FINAL_ACTION_REQUIRED" = "true" ]; then
            NEW_DEPS_FOR_ARTIFACT_CONTENT_JSON_STR=$(cat "$TEMP_NEW_DEPS_ACCUMULATOR_FILE")
            
            echo "Final list of new dependencies for artifact: $NEW_DEPS_FOR_ARTIFACT_CONTENT_JSON_STR"
            echo "Tool Description for artifact: $TOOL_DESCRIPTION"
            echo "Asset Instructions for artifact (first 100 chars): ${ASSET_INSTRUCTIONS_STR:0:100}..."

            # Construct the artifact content JSON
            jq -n \
              --arg directive "$TOOL_DIRECTIVE" \
              --arg description "$TOOL_DESCRIPTION" \
              --argjson newDeps "$NEW_DEPS_FOR_ARTIFACT_CONTENT_JSON_STR" \
              --arg assetInst "$ASSET_INSTRUCTIONS_STR" \
              '{toolDirective: $directive, toolDescription: $description, newDependencies: $newDeps, assetInstructions: $assetInst}' > "$ARTIFACT_CONTENT_PATH"
            
            echo "Created artifact content at: $ARTIFACT_CONTENT_PATH"
            echo "Artifact content preview:"
            cat "$ARTIFACT_CONTENT_PATH"
            
            echo "artifact_file_path=${ARTIFACT_CONTENT_PATH}" >> $GITHUB_OUTPUT
          else
            echo "No new, undeclared dependencies were found that require action."
          fi

          # Cleanup temporary files
          rm "$TEMP_NEW_DEPS_ACCUMULATOR_FILE"
          rm "$FOUND_NEW_DEP_MARKER_FILE"

          echo "action_required=${FINAL_ACTION_REQUIRED}" >> $GITHUB_OUTPUT
          echo "--- Finished: Check for New Undeclared Dependencies ---"

      - name: Upload Pending Dependencies Artifact (if any)
        if: steps.check_deps.outputs.action_required == 'true' && steps.check_deps.outputs.artifact_file_path != ''
        uses: actions/upload-artifact@v4
        with:
          name: pending-dependencies-${{ needs.initial_checks.outputs.pr_sha }}
          path: ${{ steps.check_deps.outputs.artifact_file_path }} # Use the path output by the previous step
          if-no-files-found: error # Should error if we expect a file but it's not there

  build_and_run_douglas_checker:
    name: 2. Build Tool & Run Douglas Ethos Check
    needs: [initial_checks, analyze_dependencies]
    if: >
      success() &&
      needs.initial_checks.outputs.critical_initial_checks_passed == 'true' &&
      needs.analyze_dependencies.outputs.dependency_action_required == 'false' && 
      github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    permissions:
      contents: read

    outputs:
      douglas_check_step_outcome: ${{ steps.douglas_checker_run.outcome }}
      imgur_screenshot_url: ${{ steps.upload_to_imgur.outputs.image_url || '' }} # ADDED IMGUR URL OUTPUT

    steps:
      - name: Checkout OET Code (PR branch)
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.initial_checks.outputs.pr_sha }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install OET Dependencies
        run: npm ci

      - name: Prepare for Static Build (Isolate New Tool)
        env:
          TOOL_DIRECTIVE: ${{ needs.initial_checks.outputs.tool_directive }}
        run: |
          echo "Isolating tool: $TOOL_DIRECTIVE for static check"
          if [ -z "$TOOL_DIRECTIVE" ]; then
            echo "::error::Tool directive not received from initial_checks job. Cannot prune."
            exit 1
          fi
          echo "Removing app/api..."
          rm -rf app/api || echo "No app/api directory to remove or removal failed (continuing)."
          if [ -d "app/tool" ]; then
            echo "Removing other tool directories from app/tool/ ..."
            cd app/tool
            ls -l
            echo 'all tools'
            ls -d */ 2>/dev/null | grep -v -E "^(${TOOL_DIRECTIVE}/|_components/|_hooks/)$" | xargs -r rm -rf
            ls -l
            cd ../.. 
          else
            echo "app/tool directory not found, skipping tool pruning."
          fi
          echo "Project structure pruned for static check."

      - name: Build OET for Static Export (and check for lint issues)
        id: build_oet
        env:
          NEXT_OUTPUT_MODE: export
        run: |
          echo "Attempting static build with NEXT_OUTPUT_MODE=${NEXT_OUTPUT_MODE}..."
          BUILD_LOG_FILE_PATH="${{ runner.temp }}/build_output.log"

          echo "Running: npm run build (output will be in $BUILD_LOG_FILE_PATH and then echoed)"
          set +e 
          npm run build > "$BUILD_LOG_FILE_PATH" 2>&1
          BUILD_EXIT_CODE=$? 
          set -e 

          echo "npm run build exited with code: $BUILD_EXIT_CODE" 

          echo "--- Start of Build Output (from $BUILD_LOG_FILE_PATH) ---"
          if [ -f "$BUILD_LOG_FILE_PATH" ]; then
            cat "$BUILD_LOG_FILE_PATH"
          else
            echo "ERROR: Build log file $BUILD_LOG_FILE_PATH not found!"
          fi
          echo "--- End of Build Output ---"

          # Set build_command_failed output
          if [ "$BUILD_EXIT_CODE" -ne 0 ]; then
            echo "build_command_failed=true" >> $GITHUB_OUTPUT
            echo "::warning::'npm run build' command failed with exit code $BUILD_EXIT_CODE."
          else
            echo "build_command_failed=false" >> $GITHUB_OUTPUT
            echo "'npm run build' command succeeded."
          fi

          # Set build_succeeded_structurally output
          if [ -d "out" ]; then
            echo "Build output directory 'out' found."
            echo "build_succeeded_structurally=true" >> $GITHUB_OUTPUT
          else
            echo "::error::Build output directory 'out' not found."
            echo "build_succeeded_structurally=false" >> $GITHUB_OUTPUT
            if [ "$BUILD_EXIT_CODE" -eq 0 ]; then 
                echo "build_command_failed=true" >> $GITHUB_OUTPUT 
                echo "::error::'out' dir missing despite npm build exit code 0. Marking as command failed."
            fi
          fi

          echo "build_log_path=$BUILD_LOG_FILE_PATH" >> $GITHUB_OUTPUT

      - name: Capture Lint Output and Changed Files for AI Fixer
        id: capture_for_ai_fix
        if: steps.build_oet.outputs.build_command_failed == 'true'
        env:
          TOOL_DIRECTIVE_PATH: app/tool/${{ needs.initial_checks.outputs.tool_directive }}
        run: |
          echo "--- Start of capture_for_ai_fix step ---"
          echo "Condition for this step (build_command_failed == 'true') was met."
          BUILD_LOG_FILE="${{ steps.build_oet.outputs.build_log_path }}"
          LINT_DATA_DIR="${{ runner.temp }}/lint-data-for-artifact"
          mkdir -p "$LINT_DATA_DIR"
          LINT_ERRORS_FILE="$LINT_DATA_DIR/lint_errors.txt"
          FILES_TO_CHECK_FILE="$LINT_DATA_DIR/files_to_check.txt"

          # Initialize to false
          LINT_ERRORS_IDENTIFIED_FOR_AI_FLAG="false" 

          if [ -f "$BUILD_LOG_FILE" ]; then
            echo "Build log file found: $BUILD_LOG_FILE"
            if grep -q -E "Failed to compile.|requires a value, but a value was not provided" "$BUILD_LOG_FILE"; then
              echo "MATCHED: 'Failed to compile.' or similar found in build log."
              cp "$BUILD_LOG_FILE" "$LINT_ERRORS_FILE"
              echo "Copied build log to $LINT_ERRORS_FILE"
              
              echo "Identifying newly added .ts/.tsx files in '$TOOL_DIRECTIVE_PATH' for potential AI fix..."
              find "$TOOL_DIRECTIVE_PATH" \( -name "*.ts" -o -name "*.tsx" \) -type f > "$FILES_TO_CHECK_FILE"
              echo "Result of find command (content of $FILES_TO_CHECK_FILE):"
              cat "$FILES_TO_CHECK_FILE" # Log the found files

              if [ -s "$FILES_TO_CHECK_FILE" ]; then
                echo "Found .ts/.tsx files in the tool directory. Setting LINT_ERRORS_IDENTIFIED_FOR_AI_FLAG to true."
                LINT_ERRORS_IDENTIFIED_FOR_AI_FLAG="true"
              else
                echo "::warning::Build failed with lint-like errors, but NO relevant .ts/.tsx files were found in '$TOOL_DIRECTIVE_PATH'. AI fix will NOT be attempted for this run."
                # LINT_ERRORS_IDENTIFIED_FOR_AI_FLAG remains false
              fi
            else
              echo "NO MATCH: 'Failed to compile.' or similar NOT found in build log. Not treating as lint failure for AI fix."
              # LINT_ERRORS_IDENTIFIED_FOR_AI_FLAG remains false
            fi
          else
            echo "::warning::Build output log ($BUILD_LOG_FILE) not found. Cannot extract lint errors."
            # LINT_ERRORS_IDENTIFIED_FOR_AI_FLAG remains false
          fi

          echo "Final LINT_ERRORS_IDENTIFIED_FOR_AI_FLAG value before setting output: $LINT_ERRORS_IDENTIFIED_FOR_AI_FLAG"
          echo "lint_errors_captured_for_ai=$LINT_ERRORS_IDENTIFIED_FOR_AI_FLAG" >> $GITHUB_OUTPUT
          echo "--- End of capture_for_ai_fix step ---"

      - name: Upload Lint Failure Artifact for AI Fixer
        if: steps.capture_for_ai_fix.outputs.lint_errors_captured_for_ai == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: lint-failure-data-${{ needs.initial_checks.outputs.pr_sha }}
          path: ${{ runner.temp }}/lint-data-for-artifact/
          if-no-files-found: warn

      - name: Serve Static Output Locally
        id: serve_static
        if: steps.build_oet.outputs.build_succeeded_structurally == 'true' && steps.capture_for_ai_fix.outputs.lint_errors_captured_for_ai != 'true'
        run: |
          echo "Starting static server for 'out' directory on port 3001..."
          if sudo fuser 3001/tcp > /dev/null 2>&1; then
            echo "Port 3001 is in use. Attempting to kill process..."
            sudo fuser -k 3001/tcp || echo "Failed to kill process on port 3001, or it was already free."
            sleep 2 
          fi
          npx serve out -l 3001 & 
          SERVER_PID=$!
          echo "Server PID: $SERVER_PID"
          echo "server_pid=$SERVER_PID" >> $GITHUB_OUTPUT
          echo "Local server URL: http://localhost:3001"
          echo "Waiting for server on port 3001..."
          timeout 30s bash -c 'until curl -sSf http://localhost:3001 > /dev/null; do echo -n "."; sleep 1; done' \
          || (echo "::error::Local server (npx serve) did not start on port 3001 in time." && (sudo kill -9 $SERVER_PID || true) && exit 1)
          echo "Server is up!"
        continue-on-error: true

      - name: Clone Douglas Checker
        # ... (This step remains unchanged from your last full paste) ...
        if: steps.serve_static.outcome == 'success'
        run: |
          echo "Cloning Douglas checker..."
          git clone https://github.com/Online-Everything-Tool/douglas.git ./douglas-checker
          if [ ! -d "./douglas-checker" ]; then
            echo "::error::Failed to clone Douglas checker repository."
            exit 1
          fi

      - name: Install Douglas Checker Dependencies
        if: steps.serve_static.outcome == 'success'
        working-directory: ./douglas-checker
        run: |
          echo "Installing Douglas dependencies..."
          if [ -f "package-lock.json" ]; then
            npm ci
          else
            npm install
          fi

      - name: Run Douglas Ethos Check
        id: douglas_checker_run
        if: steps.serve_static.outcome == 'success'
        working-directory: ./douglas-checker
        env:
          TOOL_DIRECTIVE: ${{ needs.initial_checks.outputs.tool_directive }}
        run: |
          echo "Running Douglas check for tool: $TOOL_DIRECTIVE"
          TARGET_URL="http://localhost:3001/tool/$TOOL_DIRECTIVE/"
          SUMMARY_FILE_PATH="$RUNNER_TEMP/douglas_summary.md"
          SCREENSHOT_FILE_PATH="$RUNNER_TEMP/douglas_screenshot.png"
          if [ ! -f "./dist/check-tool.js" ]; then
            echo "Douglas checker not compiled. Attempting to compile..."
            npx tsc || (echo "::error::Failed to compile Douglas checker." && exit 1)
            if [ ! -f "./dist/check-tool.js" ]; then
              echo "::error::Douglas checker (dist/check-tool.js) still not found after compile attempt." && exit 1
            fi
          fi
          COMMAND_ARGS=("$TARGET_URL" --outputSummaryFile "$SUMMARY_FILE_PATH" --screenshotPath "$SCREENSHOT_FILE_PATH")
          echo "Executing: node ./dist/check-tool.js ${COMMAND_ARGS[@]}"
          node ./dist/check-tool.js "${COMMAND_ARGS[@]}"
        continue-on-error: true

      - name: Upload Screenshot to Imgur
        id: upload_to_imgur
        if: always() && steps.douglas_checker_run.outcome != 'skipped' && steps.serve_static.outcome == 'success'
        env:
          IMGUR_CLIENT_ID: ${{ secrets.IMGUR_CLIENT_ID }}
        run: |
          SCREENSHOT_FILE="$RUNNER_TEMP/douglas_screenshot.png"
          IMAGE_URL=""
          if [ -f "$SCREENSHOT_FILE" ]; then
            if [ -z "$IMGUR_CLIENT_ID" ]; then
              echo "::warning::IMGUR_CLIENT_ID secret not set. Cannot upload screenshot to Imgur."
            else
              echo "Uploading $SCREENSHOT_FILE to Imgur..."
              RESPONSE=$(curl -s -X POST \
                -H "Authorization: Client-ID $IMGUR_CLIENT_ID" \
                -F "image=@$SCREENSHOT_FILE" \
                -F "type=file" \
                -F "title=Douglas Check for PR ${{ github.event.pull_request.number }} - ${{ needs.initial_checks.outputs.tool_directive }}" \
                -F "description=Automated ethos check by Douglas for OET PR ${{ github.event.pull_request.number }} on tool ${{ needs.initial_checks.outputs.tool_directive }}. Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
                https://api.imgur.com/3/image)
              
              echo "Imgur API Response: $RESPONSE"
              UPLOAD_SUCCESS=$(echo "$RESPONSE" | jq -r .success)
              if [ "$UPLOAD_SUCCESS" = "true" ]; then
                IMAGE_URL=$(echo "$RESPONSE" | jq -r .data.link)
                echo "Screenshot uploaded to Imgur: $IMAGE_URL"
              else
                ERROR_MSG=$(echo "$RESPONSE" | jq -r .data.error)
                echo "::warning::Failed to upload screenshot to Imgur. Error: $ERROR_MSG"
              fi
            fi
          else
            echo "::warning::Screenshot file $SCREENSHOT_FILE not found. Cannot upload to Imgur."
          fi
          echo "image_url=$IMAGE_URL" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Upload Douglas Summary Artifact
        if: always() && steps.serve_static.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: douglas-summary-${{ github.run_id }}
          path: ${{ runner.temp }}/douglas_summary.md
          if-no-files-found: warn

      - name: Upload Douglas Screenshot Artifact (as fallback)
        if: always() && steps.serve_static.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: douglas-screenshot-${{ github.run_id }}
          path: ${{ runner.temp }}/douglas_screenshot.png
          if-no-files-found: warn

      - name: Kill Static Server
        if: always() && steps.serve_static.outcome == 'success' && steps.serve_static.outputs.server_pid
        run: |
          echo "Attempting to kill static server PID: ${{ steps.serve_static.outputs.server_pid }}..."
          (sudo kill -9 ${{ steps.serve_static.outputs.server_pid }} || echo "Kill failed, server might be already stopped.")
          if sudo fuser 3001/tcp > /dev/null 2>&1; then
             echo "Port 3001 still in use after PID kill, attempting fuser kill..."
             sudo fuser -k 3001/tcp || echo "fuser kill also failed or port now free."
          else
             echo "Port 3001 is free."
          fi

  report_pr_status:
    name: 3. Report PR Validation Status & Determine Outcome
    needs:
      - initial_checks
      - analyze_dependencies
      - build_and_run_douglas_checker
    if: always() && github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      actions: read

    steps:
      - name: Download Douglas Summary Artifact (if build job ran)
        id: download_summary
        if: needs.build_and_run_douglas_checker.result != 'skipped'
        uses: actions/download-artifact@v4
        with:
          name: douglas-summary-${{ github.run_id }}
          path: ${{ runner.temp }}/douglas-artifacts/summary
        continue-on-error: true

      - name: Read Douglas Summary Content
        id: read_summary
        if: steps.download_summary.outcome == 'success' && (join(runner.os, '') != 'Windows' && system('test -f ${{ runner.temp }}/douglas-artifacts/summary/douglas_summary.md') == 0 || join(runner.os, '') == 'Windows' && system('Test-Path ${{ runner.temp }}/douglas-artifacts/summary/douglas_summary.md') == 'True')
        run: |
          SUMMARY_FILE="${{ runner.temp }}/douglas-artifacts/summary/douglas_summary.md"
          SUMMARY_CONTENT=$(cat "$SUMMARY_FILE")
          SUMMARY_CONTENT="${SUMMARY_CONTENT//'%'/'%25'}" 
          SUMMARY_CONTENT="${SUMMARY_CONTENT//$'\n'/'%0A'}"
          SUMMARY_CONTENT="${SUMMARY_CONTENT//$'\r'/'%0D'}"
          echo "summary_markdown=${SUMMARY_CONTENT}" >> $GITHUB_OUTPUT
        shell: bash
        continue-on-error: true

      - name: Construct and Post PR Comment
        id: post_comment
        uses: actions/github-script@v7 # <<< --- THIS LINE WAS MISSING ---
        env:
          # --- Info from initial_checks job ---
          PR_NUMBER: ${{ needs.initial_checks.outputs.pr_number }}
          TOOL_DIRECTIVE: ${{ needs.initial_checks.outputs.tool_directive }}
          INITIAL_CHECKS_JOB_RESULT: ${{ needs.initial_checks.result }}
          PATH_VALIDATION_PASSED: ${{ needs.initial_checks.outputs.path_validation_passed }}
          INVALID_FILES_LIST: ${{ needs.initial_checks.outputs.invalid_files_list }}
          AI_ANALYSIS_SUCCEEDED: ${{ needs.initial_checks.outputs.analysis_succeeded }}
          AI_SCORE: ${{ needs.initial_checks.outputs.ai_analysis_score }}
          AI_IS_TYPO: ${{ needs.initial_checks.outputs.ai_analysis_is_typo }}
          AI_SUGGESTIONS_JSON: ${{ needs.initial_checks.outputs.ai_analysis_suggestions_json }}
          AI_REASONING: ${{ needs.initial_checks.outputs.ai_analysis_reasoning }}
          CRITICAL_INITIAL_CHECKS_PASSED_OUTPUT: ${{ needs.initial_checks.outputs.critical_initial_checks_passed }}

          # --- Info from analyze_dependencies job ---
          ANALYZE_DEPENDENCIES_JOB_RESULT: ${{ needs.analyze_dependencies.result }}
          DEPENDENCY_ACTION_REQUIRED_OUTPUT: ${{ needs.analyze_dependencies.outputs.dependency_action_required }}

          # --- Info from build_and_run_douglas_checker job ---
          BUILD_DOUGLAS_JOB_RESULT: ${{ needs.build_and_run_douglas_checker.result }}
          LINT_ERRORS_CAPTURED_OUTPUT: ${{ needs.build_and_run_douglas_checker.outputs.lint_errors_captured_for_ai || 'false' }}
          DOUGLAS_CHECK_STEP_OUTCOME_OUTPUT: ${{ needs.build_and_run_douglas_checker.outputs.douglas_check_step_outcome || 'skipped' }}
          IMGUR_SCREENSHOT_URL_OUTPUT: ${{ needs.build_and_run_douglas_checker.outputs.imgur_screenshot_url }}

          DOUGLAS_SUMMARY_MD_CONTENT: ${{ steps.read_summary.outputs.summary_markdown || 'Douglas summary not available or check skipped.' }}
          ACTION_RUN_URL: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          # Pass PR_HEAD_SHA to include in the comment for clarity
          PR_HEAD_SHA_ENV: ${{ needs.initial_checks.outputs.pr_sha || github.event.pull_request.head.sha || github.event.workflow_run.head_sha }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { repo, owner } = context.repo; 
            const issue_number = parseInt(process.env.PR_NUMBER, 10);

            if (isNaN(issue_number)) {
              core.setFailed("PR Number is not available for commenting.");
              return;
            }

            const toolDirective = process.env.TOOL_DIRECTIVE || "UnknownTool";
            const prHeadShaShort = (process.env.PR_HEAD_SHA_ENV || 'N/A').substring(0,7);
            let commentBody = `## 🤖 OET Tool PR Validation Status for \`${toolDirective}\`\n\nCommit: \`${prHeadShaShort}\` · [View Action Run (ID: ${{ github.run_id }})](${process.env.ACTION_RUN_URL}?pr=${issue_number})\n\n`;

            const initialChecksPassed = process.env.CRITICAL_INITIAL_CHECKS_PASSED_OUTPUT === 'true';
            const depActionRequired = process.env.DEPENDENCY_ACTION_REQUIRED_OUTPUT === 'true';
            const lintErrorsCaptured = process.env.LINT_ERRORS_CAPTURED_OUTPUT === 'true';

            const initialChecksJobResult = process.env.INITIAL_CHECKS_JOB_RESULT;
            const analyzeDepsJobResult = process.env.ANALYZE_DEPENDENCIES_JOB_RESULT;
            const buildDouglasJobResult = process.env.BUILD_DOUGLAS_JOB_RESULT;
            const douglasCheckStepOutcome = process.env.DOUGLAS_CHECK_STEP_OUTCOME_OUTPUT;

            // --- 1. Initial PR Validations Summary ---
            commentBody += `### 1. Initial PR Validations (Job Status: ${initialChecksJobResult})\n`; // Added job status
            if (initialChecksJobResult === 'success' && initialChecksPassed) {
              commentBody += `✅ **Passed!** All initial structure and naming checks are okay.\n`;
            } else if (initialChecksJobResult === 'failure' || !initialChecksPassed) {
              commentBody += `🚨 **Failed!**\n`;
              if (process.env.PATH_VALIDATION_PASSED === 'false') {
                const invalidFiles = (process.env.INVALID_FILES_LIST || "List unavailable.").replace(/%0A/g, '\n    - ').replace(/%0D/g, '');
                commentBody += `  - **Path Validation Issue:** Files found outside allowed directory. Invalid files:\n    - ${invalidFiles}\n`;
              } else {
                commentBody += `  - One or more initial checks did not pass. Refer to Action logs for this job.\n`;
              }
            } else { 
               commentBody += `🟡 Initial validations were skipped or had an unexpected status (${initialChecksJobResult}).\n`;
            }
            commentBody += `\n  **🤖 AI Directive Name Analysis:**\n`;
            if (process.env.AI_ANALYSIS_SUCCEEDED === 'true') {
              commentBody += `    - Score: **${process.env.AI_SCORE}** / Likely Typo: ${process.env.AI_IS_TYPO === 'true' ? '**Yes** ❗' : 'No'}\n`;
              let reasoning = process.env.AI_REASONING || "No reasoning provided.";
              reasoning = reasoning.replace(/%0A/g, '\n        ');
              commentBody += `    - Reasoning:\n        ${reasoning}\n`;
              try {
                const suggestions = JSON.parse(process.env.AI_SUGGESTIONS_JSON || '[]');
                if (suggestions.length > 0) {
                  commentBody += `    - Suggestions: ${suggestions.map(s => `\`${s}\``).join(', ')}\n`;
                }
              } catch (e) { /* ignore */ }
            } else {
              commentBody += `    - ⚠️ AI name analysis could not be performed or API call failed.\n`;
            }
            commentBody += "\n---\n";

            // --- 1B. Dependency Analysis Summary ---
            commentBody += `### 1B. Dependency Analysis (Job Status: ${analyzeDepsJobResult})\n`;
            if (analyzeDepsJobResult === 'skipped') {
                commentBody += `🟡 Skipped (likely due to prior critical failures).\n`;
            } else if (depActionRequired) {
                commentBody += `⏳ **Pending:** New dependencies identified. The 'AI Dependency Manager' workflow will attempt to vet and install them.\n`;
            } else if (analyzeDepsJobResult === 'success') {
                commentBody += `✅ No new dependencies require automatic action for this commit.\n`;
            } else { 
                commentBody += `🚨 **Failed!** Problem during dependency analysis. Review Action logs for this job.\n`;
            }
            commentBody += "\n---\n";

            // --- 2. Local Build & Douglas Ethos Check Summary ---
            commentBody += `### 2. Local Build & Douglas Ethos Check (Job Status: ${buildDouglasJobResult})\n`;
            if (buildDouglasJobResult === 'skipped') {
              commentBody += `🟡 Skipped (likely due to pending dependency actions or prior critical failures).\n`;
            } else if (lintErrorsCaptured) { 
              commentBody += `🟡 **Build Failed (Lint Issues):** An 'AI Lint Fixer' workflow will attempt automatic corrections.\n`;
              commentBody += `   Douglas Ethos Check was skipped due to this build failure.\n`;
            } else if (buildDouglasJobResult === 'failure') { 
              commentBody += `🚨 **Build Failed (Other Issues)!** AI lint fix was NOT attempted for this failure. Review Action logs.\n`;
            } else if (buildDouglasJobResult === 'success') { 
              commentBody += `✅ **Local Static Build Successful.**\n`;
              if (douglasCheckStepOutcome === 'success') {
                commentBody += `✅ **Douglas Ethos Check Passed!**\n`;
              } else if (douglasCheckStepOutcome === 'skipped') {
                commentBody += `🟡 Douglas Ethos Check was skipped (e.g., local server issue).\n`;
              } else { 
                commentBody += `🚨 **Douglas Ethos Check FAILED or had issues!** (Outcome: ${douglasCheckStepOutcome})\n`;
              }
              const douglasSummary = (process.env.DOUGLAS_SUMMARY_MD_CONTENT).replace(/%0A/g, '\n').replace(/%0D/g, '');
              if (douglasSummary && douglasSummary.trim() !== 'Douglas summary not available or check skipped.') {
                commentBody += `\n${douglasSummary}\n`; 
              }
              const imgurUrl = process.env.IMGUR_SCREENSHOT_URL_OUTPUT;
              if (imgurUrl) {
                commentBody += `\n   **Douglas's View (Screenshot):**\n   ![Douglas Screenshot](${imgurUrl})\n`;
              }
            }
            commentBody += "\n---\n";

            // --- 3. Overall Status & Next Steps ---
            commentBody += `### 3. Overall Status for this Validation Run\n`;
            const allLocalChecksConsideredForThisRunPassed = 
                initialChecksJobResult === 'success' && initialChecksPassed &&
                analyzeDepsJobResult === 'success' && !depActionRequired &&
                buildDouglasJobResult === 'success' && !lintErrorsCaptured && douglasCheckStepOutcome === 'success';

            if (depActionRequired && analyzeDepsJobResult !== 'failure') { // Don't say this if the dep analysis itself failed
              commentBody += `⏳ **Next Step:** 'AI Dependency Manager' workflow will run to process dependencies. PR checks will update after it completes.`;
            } else if (lintErrorsCaptured && buildDouglasJobResult !== 'failure' && !depActionRequired) { // Ensure it's not a cascade from dep failure
              commentBody += `⏳ **Next Step:** 'AI Lint Fixer' workflow will run to correct linting issues. PR checks will update after it completes.`;
            } else if (allLocalChecksConsideredForThisRunPassed) {
              commentBody += `✅ **All local OET validation checks passed for this commit!**\n`;
              commentBody += `   🚀 **Netlify Deploy Preview:** If configured, this should trigger. Monitor Netlify checks on the PR.`;
              // Future: Add logic here to trigger Netlify Deployment Event if using that gating method
            } else {
              commentBody += `‼️ **Manual Action Required:** One or more critical checks failed in this validation run, and no further automated correctors were triggered for them *by this run*. Please review details above and in the [full Action logs](${actionRunUrl}).\n`;
            }

            commentBody += `\n\n---\n*OET CI Bot Report for commit \`${prHeadShaShort}\`*`;

            try {
              await github.rest.issues.createComment({ owner, repo, issue_number, body: commentBody });
            } catch (e) {
              core.warning(`Failed to post PR comment: ${e.message}`);
            }

            // --- Set overall workflow outcome ---
            if (depActionRequired || lintErrorsCaptured) {
              if ((depActionRequired && analyzeDepsJobResult === 'failure') || (lintErrorsCaptured && buildDouglasJobResult === 'failure')){
                 core.setFailed("A corrective workflow is needed, but its preceding preparatory job failed. Manual review of Action logs is required.");
              } else {
                 core.notice("Corrective AI workflows (Dependencies or Linting) are expected to run. This validation cycle is handing off processing. Monitor PR checks for updates from those workflows.");
              }
            } else if (!allLocalChecksConsideredForThisRunPassed) {
                core.setFailed("One or more critical local OET checks failed for this commit, and no automated correctors were triggered by this validation run to address them.");
            } else {
                core.info("All local OET checks passed for this commit, and no corrective AI workflows were triggered by this validation run.");
            }
