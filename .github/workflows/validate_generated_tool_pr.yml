name: Validate Generated Tool PR

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - main

jobs:
  validate:
    name: Validate Tool Directive and File Paths
    if: startsWith(github.head_ref, 'feat/gen-')
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read

    outputs:
      tool_directive: ${{ steps.extract_directive.outputs.tool_directive }}
      path_validation_passed: ${{ steps.validate_paths.outputs.validation_passed }}
      pattern_check_passed: ${{ steps.check_patterns.outputs.check_passed }}
      analysis_succeeded: ${{ steps.analyze_name.outputs.analysis_succeeded }} # Output for analysis success/failure

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract Tool Directive
        id: extract_directive
        run: |
          # ... (extraction logic unchanged) ...
          BRANCH_NAME="${{ github.head_ref }}"
          TEMP_DIRECTIVE=${BRANCH_NAME#feat/gen-}
          TOOL_DIRECTIVE=$(echo "$TEMP_DIRECTIVE" | sed 's/-[0-9]*$//')
          if [ -z "$TOOL_DIRECTIVE" ]; then exit 1; fi
          echo "tool_directive=${TOOL_DIRECTIVE}" >> $GITHUB_OUTPUT

      - name: Check Directive Pattern
        id: check_patterns
        run: |
          # ... (pattern checking logic unchanged) ...
          TOOL_DIRECTIVE="${{ steps.extract_directive.outputs.tool_directive }}"
          PATTERN_FILE=".github/tool-directive-patterns.txt"; MATCH_FOUND=false
          if [ ! -f "$PATTERN_FILE" ]; then echo "::error::Pattern file not found."; echo "check_passed=false" >> $GITHUB_OUTPUT; exit 1; fi
          while IFS= read -r pattern || [[ -n "$pattern" ]]; do if echo "$TOOL_DIRECTIVE" | grep -q -E -- "$pattern"; then MATCH_FOUND=true; break; fi; done < <(grep -v '^#' "$PATTERN_FILE" | grep -v '^$')
          if $MATCH_FOUND; then echo "check_passed=true" >> $GITHUB_OUTPUT; else echo "::error::Directive does not match patterns."; echo "check_passed=false" >> $GITHUB_OUTPUT; exit 1; fi

      # --- MODIFIED STEP: Analyze Directive Name via API (Non-blocking) ---
      - name: Analyze Directive Name (AI Check)
        id: analyze_name
        # Run only if the basic pattern check passed
        if: steps.check_patterns.outputs.check_passed == 'true'
        # Allow this step to fail without failing the entire job immediately
        continue-on-error: true # <-- ADDED: Allows workflow to proceed even if curl/jq fails
        run: |
          TOOL_DIRECTIVE="${{ steps.extract_directive.outputs.tool_directive }}"
          # Use secret or default for testing
          API_ENDPOINT="${{ secrets.APP_URL }}/api/analyze-directive-name/"
          # Placeholder context - enhance API later if needed
          EXISTING_DIRECTIVES='[]'; GENERATIVE_DESC="Function related to ${TOOL_DIRECTIVE//-/ }"

          echo "Attempting AI Analysis API call: $API_ENDPOINT"
          # Use curl, capture HTTP status code, allow failure (-f removed), save output
          HTTP_STATUS=$(curl -s -w "%{http_code}" -X POST "$API_ENDPOINT" \
            -H "Content-Type: application/json" \
            -d "{
                  \"proposedDirective\": \"$TOOL_DIRECTIVE\",
                  \"existingDirectives\": $EXISTING_DIRECTIVES,
                  \"generativeDescription\": \"$GENERATIVE_DESC\"
                }" \
            -o response.json)

          echo "API HTTP Status: $HTTP_STATUS"
          echo "API Response Body:"
          cat response.json || echo "<empty response>"

          # Check if API call was successful (2xx status) AND response body is valid JSON
          if [[ "$HTTP_STATUS" -ge 200 && "$HTTP_STATUS" -lt 300 ]] && jq -e . response.json > /dev/null; then
             echo "API call successful and response is valid JSON."
             SCORE=$(jq -r '.score // 0.5' response.json)
             IS_TYPO=$(jq -r '.is_likely_typo // false' response.json)
             SUGGESTIONS=$(jq -c '.suggestions // []' response.json)
             REASONING=$(jq -r '.reasoning // "Analysis incomplete."' response.json)
             ANALYSIS_SUCCEEDED="true"
          else
             echo "::warning::AI Analysis API call failed or returned invalid JSON (HTTP Status: $HTTP_STATUS). Skipping detailed analysis."
             SCORE="N/A"; IS_TYPO="N/A"; SUGGESTIONS="[]"; REASONING="Analysis could not be performed."; ANALYSIS_SUCCEEDED="false"
          fi

          # Set outputs regardless of success/failure of the API call
          echo "analysis_succeeded=$ANALYSIS_SUCCEEDED" >> $GITHUB_OUTPUT
          echo "score=$SCORE" >> $GITHUB_OUTPUT
          echo "is_typo=$IS_TYPO" >> $GITHUB_OUTPUT
          echo "suggestions=$SUGGESTIONS" >> $GITHUB_OUTPUT
          echo "reasoning=$REASONING" >> $GITHUB_OUTPUT
          # DO NOT exit 1 here, let the workflow continue

      # --- END MODIFIED STEP ---

      - name: Validate Changed File Paths
        id: validate_paths
        # Run only if pattern check passed
        if: steps.check_patterns.outputs.check_passed == 'true'
        env:
          TOOL_DIRECTIVE: ${{ steps.extract_directive.outputs.tool_directive }}
        run: |
          # ... (Path validation logic - exits 1 on failure) ...
          if [ -z "$TOOL_DIRECTIVE" ]; then exit 1; fi
          git fetch origin main; BASE_SHA=$(git merge-base HEAD origin/main); CHANGED_FILES=$(git diff --name-status $BASE_SHA HEAD)
          if [ -z "$CHANGED_FILES" ]; then echo "validation_passed=true" >> $GITHUB_OUTPUT; exit 0; fi
          ALLOWED_FOLDER_PATTERN="^app/tool/${TOOL_DIRECTIVE}/"; INVALID_FILES="" && ALL_VALID=true
          echo "$CHANGED_FILES" | while IFS=$'\t' read -r status filepath; do if [[ -n "$filepath" ]]; then if [[ ! "$filepath" =~ $ALLOWED_FOLDER_PATTERN ]]; then echo "::error file=$filepath::Invalid path."; INVALID_FILES="${INVALID_FILES}${filepath}\n" && ALL_VALID=false; fi; fi; done
          if $ALL_VALID; then echo "validation_passed=true" >> $GITHUB_OUTPUT; else echo "validation_passed=false" >> $GITHUB_OUTPUT; INVALID_FILES=$(echo -e "$INVALID_FILES" | sed -z 's/\n/\\n/g'); echo "invalid_files_list=${INVALID_FILES}" >> $GITHUB_OUTPUT; exit 1; fi

      # --- MODIFIED STEP: Add Result Comment to PR (Handles Analysis Failure) ---
      - name: Add Result Comment to PR
        # Always run this step to report status, unless the job was cancelled etc.
        if: always() && steps.extract_directive.outputs.tool_directive # Only run if directive was extracted
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { repo, owner } = context.repo; const issue_number = context.issue.number;
            const toolDirective = `${{ steps.extract_directive.outputs.tool_directive }}`;
            // Determine overall success based ONLY on mandatory checks
            const patternCheckPassed = `${{ steps.check_patterns.outputs.check_passed || 'false' }}` === 'true';
            const pathValidationPassed = `${{ steps.validate_paths.outputs.validation_passed || 'false' }}` === 'true';
            const criticalChecksPassed = patternCheckPassed && pathValidationPassed;
            const invalidFilesList = `${{ steps.validate_paths.outputs.invalid_files_list || '' }}`.replace(/\\n/g, '\n- ');

            // Get analysis results (check if analysis step succeeded)
            const analysisSucceeded = `${{ steps.analyze_name.outputs.analysis_succeeded || 'false' }}` === 'true';
            const analysisScore = `${{ steps.analyze_name.outputs.score || 'N/A' }}`;
            const isLikelyTypo = `${{ steps.analyze_name.outputs.is_typo || 'N/A' }}` === 'true';
            const suggestions = JSON.parse(`${{ steps.analyze_name.outputs.suggestions || '[]' }}`);
            const reasoning = `${{ steps.analyze_name.outputs.reasoning || 'Analysis not performed.' }}`;

            let commentBody = '';

            // Report failure if critical checks failed
            if (!criticalChecksPassed) {
              commentBody += `🚨 **Automatic Validation Failed!** 🚨\n\n`;
              let failureReason = '';
              if (!patternCheckPassed) failureReason += `- Directive \`${toolDirective}\` does not match patterns in \`.github/tool-directive-patterns.txt\`.\n`;
              if (!pathValidationPassed) failureReason += `- Files changed outside allowed directory \`app/t/${toolDirective}/*\`. Invalid files:\n- ${invalidFilesList || 'List unavailable.'}\n`;
              commentBody += failureReason;
              commentBody += `\nPlease investigate and address the issues. This PR should likely be closed.\n\n---\n`;
            } else {
              commentBody += `✅ **Automatic Validation Passed!** ✅\n\n - Directive \`${toolDirective}\` matches allowed patterns.\n - All changed files are within the allowed directory.\n\n---\n`;
            }

            // Always add AI Analysis section
            commentBody += `**🤖 AI Directive Name Analysis:**\n\n`;
            if (analysisSucceeded) {
               commentBody += `- **Score:** ${analysisScore} (0.0 = bad, 1.0 = good)\n`;
               commentBody += `- **Likely Typo:** ${isLikelyTypo ? 'Yes ❗' : 'No'}\n`;
               commentBody += `- **Reasoning:** ${reasoning}\n`;
               if (suggestions && suggestions.length > 0) {
                 commentBody += `- **Suggestions:** ${suggestions.map(s => `\`${s}\``).join(', ')}\n`;
               }
               if (isLikelyTypo || parseFloat(analysisScore) < 0.6 && analysisScore !== 'N/A') {
                  commentBody += `\n⚠️ **Suggestion:** Consider if \`${toolDirective}\` is the best name or a potential typo based on the analysis.\n`;
               }
            } else {
               // Add specific message if analysis API call failed
               commentBody += ` - ⚠️ AI analysis could not be performed (API endpoint unreachable or returned an error).\n`;
            }

            // Post the comment
            await github.rest.issues.createComment({ owner, repo, issue_number, body: commentBody });

            // Explicitly fail the workflow run only if critical checks failed
            if (!criticalChecksPassed) {
                 core.setFailed('PR validation failed (pattern or path checks). See comment for details.');
            }
